{"version":3,"sources":["../../../../../../packages/vite/src/executors/dev-server/dev-server.impl.ts"],"sourcesContent":["import 'dotenv/config';\nimport { ExecutorContext } from '@nrwl/devkit';\nimport { createServer, InlineConfig, mergeConfig, ViteDevServer } from 'vite';\n\nimport {\n  getViteSharedConfig,\n  getNxTargetOptions,\n  getViteServerOptions,\n  getViteBuildOptions,\n} from '../../utils/options-utils';\n\nimport { ViteDevServerExecutorOptions } from './schema';\nimport { ViteBuildExecutorOptions } from '../build/schema';\n\nexport async function* viteDevServerExecutor(\n  options: ViteDevServerExecutorOptions,\n  context: ExecutorContext\n): AsyncGenerator<{ success: boolean; baseUrl: string }> {\n  // Retrieve the option for the configured buildTarget.\n  const buildTargetOptions: ViteBuildExecutorOptions = getNxTargetOptions(\n    options.buildTarget,\n    context\n  );\n\n  // Merge the options from the build and dev-serve targets.\n  // The latter takes precedence.\n  const mergedOptions = {\n    ...buildTargetOptions,\n    ...options,\n  };\n\n  // Add the server specific configuration.\n  const serverConfig: InlineConfig = mergeConfig(\n    getViteSharedConfig(mergedOptions, options.clearScreen, context),\n    {\n      build: getViteBuildOptions(mergedOptions, context),\n      server: getViteServerOptions(mergedOptions, context),\n    }\n  );\n\n  try {\n    const server = await createServer(serverConfig);\n    await runViteDevServer(server);\n    const resolvedUrls = [\n      ...server.resolvedUrls.local,\n      ...server.resolvedUrls.network,\n    ];\n\n    yield {\n      success: true,\n      baseUrl: resolvedUrls[0] ?? '',\n    };\n  } catch (e) {\n    console.error(e);\n    yield {\n      success: false,\n      baseUrl: '',\n    };\n  }\n\n  await new Promise<void>((resolve) => {\n    process.once('SIGINT', () => resolve());\n    process.once('SIGTERM', () => resolve());\n    process.once('exit', () => resolve());\n  });\n}\n\nasync function runViteDevServer(server: ViteDevServer): Promise<void> {\n  await server.listen();\n  server.printUrls();\n\n  const processOnExit = async () => {\n    await server.close();\n  };\n\n  process.once('SIGINT', processOnExit);\n  process.once('SIGTERM', processOnExit);\n  process.once('exit', processOnExit);\n}\n\nexport default viteDevServerExecutor;\n"],"names":["viteDevServerExecutor","options","context","buildTargetOptions","getNxTargetOptions","buildTarget","mergedOptions","serverConfig","mergeConfig","getViteSharedConfig","clearScreen","build","getViteBuildOptions","server","getViteServerOptions","createServer","runViteDevServer","resolvedUrls","local","network","success","baseUrl","e","console","error","Promise","resolve","process","once","listen","printUrls","processOnExit","close"],"mappings":"AAAA;;;;;;;;IAcuBA,qBAAqB,MAArBA;IAkEvB,OAAqC,MAArC;;;QAhFO;sBAEgE;8BAOhE;AAKA,gBAAgBA,sBACrBC,OAAqC,EACrCC,OAAwB,EAC+B;IACvD,sDAAsD;IACtD,MAAMC,qBAA+CC,IAAAA,gCAAkB,EACrEH,QAAQI,WAAW,EACnBH;IAGF,0DAA0D;IAC1D,+BAA+B;IAC/B,MAAMI,gBAAgB,aACjBH,oBACAF;IAGL,yCAAyC;IACzC,MAAMM,eAA6BC,IAAAA,iBAAW,EAC5CC,IAAAA,iCAAmB,EAACH,eAAeL,QAAQS,WAAW,EAAER,UACxD;QACES,OAAOC,IAAAA,iCAAmB,EAACN,eAAeJ;QAC1CW,QAAQC,IAAAA,kCAAoB,EAACR,eAAeJ;IAC9C;IAGF,IAAI;QACF,MAAMW,SAAS,MAAME,IAAAA,kBAAY,EAACR;QAClC,MAAMS,iBAAiBH;QACvB,MAAMI,eAAe;eAChBJ,OAAOI,YAAY,CAACC,KAAK;eACzBL,OAAOI,YAAY,CAACE,OAAO;SAC/B;YAIUF;QAFX,MAAM;YACJG,SAAS,IAAI;YACbC,SAASJ,CAAAA,MAAAA,YAAY,CAAC,EAAE,YAAfA,MAAmB,EAAE;QAChC;IACF,EAAE,OAAOK,GAAG;QACVC,QAAQC,KAAK,CAACF;QACd,MAAM;YACJF,SAAS,KAAK;YACdC,SAAS;QACX;IACF;IAEA,MAAM,IAAII,QAAc,CAACC,UAAY;QACnCC,QAAQC,IAAI,CAAC,UAAU,IAAMF;QAC7BC,QAAQC,IAAI,CAAC,WAAW,IAAMF;QAC9BC,QAAQC,IAAI,CAAC,QAAQ,IAAMF;IAC7B;AACF;AAEA,eAAeV,iBAAiBH,MAAqB,EAAiB;IACpE,MAAMA,OAAOgB,MAAM;IACnBhB,OAAOiB,SAAS;IAEhB,MAAMC,gBAAgB,UAAY;QAChC,MAAMlB,OAAOmB,KAAK;IACpB;IAEAL,QAAQC,IAAI,CAAC,UAAUG;IACvBJ,QAAQC,IAAI,CAAC,WAAWG;IACxBJ,QAAQC,IAAI,CAAC,QAAQG;AACvB;MAEA,WAAe/B"}