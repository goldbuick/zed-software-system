{"version":3,"sources":["../../../../../../packages/vite/src/executors/test/vitest.impl.ts"],"sourcesContent":["import { ExecutorContext, workspaceRoot } from '@nrwl/devkit';\nimport { CoverageOptions, File, Reporter } from 'vitest';\nimport { VitestExecutorOptions } from './schema';\nimport { relative } from 'path';\n\nclass NxReporter implements Reporter {\n  deferred: {\n    promise: Promise<boolean>;\n    resolve: (val: boolean) => void;\n  };\n\n  constructor(private watch: boolean) {\n    this.setupDeferred();\n  }\n\n  async *[Symbol.asyncIterator]() {\n    do {\n      const hasErrors = await this.deferred.promise;\n      yield { hasErrors };\n      this.setupDeferred();\n    } while (this.watch);\n  }\n\n  private setupDeferred() {\n    let resolve: (val: boolean) => void;\n    this.deferred = {\n      promise: new Promise((res) => {\n        resolve = res;\n      }),\n      resolve,\n    };\n  }\n\n  onFinished(files: File[], errors?: unknown[]) {\n    const hasErrors =\n      files.some((f) => f.result?.state === 'fail') || errors?.length > 0;\n    this.deferred.resolve(hasErrors);\n  }\n}\n\nexport async function* vitestExecutor(\n  options: VitestExecutorOptions,\n  context: ExecutorContext\n) {\n  const { startVitest } = await (Function(\n    'return import(\"vitest/node\")'\n  )() as Promise<typeof import('vitest/node')>);\n\n  const projectRoot = context.projectGraph.nodes[context.projectName].data.root;\n  const offset = relative(workspaceRoot, context.cwd);\n\n  const nxReporter = new NxReporter(options.watch);\n  // if reportsDirectory is not provides vitest will remove all files in the project root\n  // when coverage is enabled in the vite.config.ts\n  const coverage: CoverageOptions = options.reportsDirectory\n    ? {\n        enabled: options.coverage,\n        reportsDirectory: options.reportsDirectory,\n      }\n    : {};\n  const settings = {\n    ...options,\n    // when running nx from the project root, the root will get appended to the cwd.\n    // creating an invalid path and no tests will be found.\n    // instead if we are not at the root, let the cwd be root.\n    root: offset === '' ? projectRoot : '',\n    reporters: [...(options.reporters ?? []), 'default', nxReporter],\n    coverage,\n  };\n\n  const ctx = await startVitest(options.mode, [], settings);\n\n  let hasErrors = false;\n\n  const processExit = () => {\n    ctx.exit();\n    if (hasErrors) {\n      process.exit(1);\n    } else {\n      process.exit(0);\n    }\n  };\n\n  if (options.watch) {\n    process.on('SIGINT', processExit);\n    process.on('SIGTERM', processExit);\n    process.on('exit', processExit);\n  }\n\n  for await (const report of nxReporter) {\n    // vitest sets the exitCode = 1 when code coverage isn't met\n    hasErrors =\n      report.hasErrors || (process.exitCode && process.exitCode !== 0);\n  }\n\n  return {\n    success: !hasErrors,\n  };\n}\n\nexport default vitestExecutor;\n"],"names":["vitestExecutor","NxReporter","Symbol","asyncIterator","hasErrors","deferred","promise","setupDeferred","watch","resolve","Promise","res","onFinished","files","errors","some","f","result","state","length","constructor","options","context","startVitest","Function","projectRoot","projectGraph","nodes","projectName","data","root","offset","relative","workspaceRoot","cwd","nxReporter","coverage","reportsDirectory","enabled","settings","reporters","ctx","mode","processExit","exit","process","on","report","exitCode","success"],"mappings":"AAAA;;;;;;;;IAwCuBA,cAAc,MAAdA;IA4DvB,OAA8B,MAA9B;;;wBApG+C;sBAGtB;AAEzB,IAAA,AAAMC,aAAN,MAAMA;IAUJ,OAAO,CAACC,OAAOC,aAAa,CAAC,GAAG;QAC9B,GAAG;YACD,MAAMC,YAAY,MAAM,IAAI,CAACC,QAAQ,CAACC,OAAO;YAC7C,MAAM;gBAAEF;YAAU;YAClB,IAAI,CAACG,aAAa;QACpB,QAAS,IAAI,CAACC,KAAK,CAAE;IACvB;IAEQD,gBAAgB;QACtB,IAAIE;QACJ,IAAI,CAACJ,QAAQ,GAAG;YACdC,SAAS,IAAII,QAAQ,CAACC,MAAQ;gBAC5BF,UAAUE;YACZ;YACAF;QACF;IACF;IAEAG,WAAWC,KAAa,EAAEC,MAAkB,EAAE;QAC5C,MAAMV,YACJS,MAAME,IAAI,CAAC,CAACC;gBAAMA;YAAAA,OAAAA,CAAAA,CAAAA,MAAAA,EAAEC,MAAM,YAARD,KAAAA,IAAAA,IAAUE,KAAK,AAAD,MAAM;cAAWJ,CAAAA,iBAAAA,KAAAA,IAAAA,OAAQK,MAAM,AAAD,IAAI;QACpE,IAAI,CAACd,QAAQ,CAACI,OAAO,CAACL;IACxB;IA1BAgB,YAAoBZ,MAAgB;qBAAhBA;QAClB,IAAI,CAACD,aAAa;IACpB;AAyBF;AAEO,gBAAgBP,eACrBqB,OAA8B,EAC9BC,OAAwB,EACxB;IACA,MAAM,EAAEC,YAAW,EAAE,GAAG,MAAOC,SAC7B;IAGF,MAAMC,cAAcH,QAAQI,YAAY,CAACC,KAAK,CAACL,QAAQM,WAAW,CAAC,CAACC,IAAI,CAACC,IAAI;IAC7E,MAAMC,SAASC,IAAAA,cAAQ,EAACC,qBAAa,EAAEX,QAAQY,GAAG;IAElD,MAAMC,aAAa,IAAIlC,WAAWoB,QAAQb,KAAK;IAC/C,uFAAuF;IACvF,iDAAiD;IACjD,MAAM4B,WAA4Bf,QAAQgB,gBAAgB,GACtD;QACEC,SAASjB,QAAQe,QAAQ;QACzBC,kBAAkBhB,QAAQgB,gBAAgB;IAC5C,IACA,CAAC,CAAC;QAOYhB;IANlB,MAAMkB,WAAW,aACZlB;QACH,gFAAgF;QAChF,uDAAuD;QACvD,0DAA0D;QAC1DS,MAAMC,WAAW,KAAKN,cAAc,EAAE;QACtCe,WAAW;eAAKnB,CAAAA,aAAAA,QAAQmB,SAAS,YAAjBnB,aAAqB,EAAE;YAAG;YAAWc;SAAW;QAChEC;;IAGF,MAAMK,MAAM,MAAMlB,YAAYF,QAAQqB,IAAI,EAAE,EAAE,EAAEH;IAEhD,IAAInC,YAAY,KAAK;IAErB,MAAMuC,cAAc,IAAM;QACxBF,IAAIG,IAAI;QACR,IAAIxC,WAAW;YACbyC,QAAQD,IAAI,CAAC;QACf,OAAO;YACLC,QAAQD,IAAI,CAAC;QACf,CAAC;IACH;IAEA,IAAIvB,QAAQb,KAAK,EAAE;QACjBqC,QAAQC,EAAE,CAAC,UAAUH;QACrBE,QAAQC,EAAE,CAAC,WAAWH;QACtBE,QAAQC,EAAE,CAAC,QAAQH;IACrB,CAAC;IAED,WAAW,MAAMI,UAAUZ,WAAY;QACrC,4DAA4D;QAC5D/B,YACE2C,OAAO3C,SAAS,IAAKyC,QAAQG,QAAQ,IAAIH,QAAQG,QAAQ,KAAK;IAClE;IAEA,OAAO;QACLC,SAAS,CAAC7C;IACZ;AACF;MAEA,WAAeJ"}