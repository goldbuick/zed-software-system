"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    vitestExecutor: ()=>vitestExecutor,
    default: ()=>_default
});
const _extends = require("@swc/helpers/lib/_extends.js").default;
const _devkit = require("@nrwl/devkit");
const _path = require("path");
let NxReporter = class NxReporter {
    async *[Symbol.asyncIterator]() {
        do {
            const hasErrors = await this.deferred.promise;
            yield {
                hasErrors
            };
            this.setupDeferred();
        }while (this.watch)
    }
    setupDeferred() {
        let resolve;
        this.deferred = {
            promise: new Promise((res)=>{
                resolve = res;
            }),
            resolve
        };
    }
    onFinished(files, errors) {
        const hasErrors = files.some((f)=>{
            var ref;
            return ((ref = f.result) == null ? void 0 : ref.state) === 'fail';
        }) || (errors == null ? void 0 : errors.length) > 0;
        this.deferred.resolve(hasErrors);
    }
    constructor(watch){
        this.watch = watch;
        this.setupDeferred();
    }
};
async function* vitestExecutor(options, context) {
    const { startVitest  } = await Function('return import("vitest/node")')();
    const projectRoot = context.projectGraph.nodes[context.projectName].data.root;
    const offset = (0, _path.relative)(_devkit.workspaceRoot, context.cwd);
    const nxReporter = new NxReporter(options.watch);
    // if reportsDirectory is not provides vitest will remove all files in the project root
    // when coverage is enabled in the vite.config.ts
    const coverage = options.reportsDirectory ? {
        enabled: options.coverage,
        reportsDirectory: options.reportsDirectory
    } : {};
    var _reporters;
    const settings = _extends({}, options, {
        // when running nx from the project root, the root will get appended to the cwd.
        // creating an invalid path and no tests will be found.
        // instead if we are not at the root, let the cwd be root.
        root: offset === '' ? projectRoot : '',
        reporters: [
            ...(_reporters = options.reporters) != null ? _reporters : [],
            'default',
            nxReporter
        ],
        coverage
    });
    const ctx = await startVitest(options.mode, [], settings);
    let hasErrors = false;
    const processExit = ()=>{
        ctx.exit();
        if (hasErrors) {
            process.exit(1);
        } else {
            process.exit(0);
        }
    };
    if (options.watch) {
        process.on('SIGINT', processExit);
        process.on('SIGTERM', processExit);
        process.on('exit', processExit);
    }
    for await (const report of nxReporter){
        // vitest sets the exitCode = 1 when code coverage isn't met
        hasErrors = report.hasErrors || process.exitCode && process.exitCode !== 0;
    }
    return {
        success: !hasErrors
    };
}
const _default = vitestExecutor;

//# sourceMappingURL=vitest.impl.js.map