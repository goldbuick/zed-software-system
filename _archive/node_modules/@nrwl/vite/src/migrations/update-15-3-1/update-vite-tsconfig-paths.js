"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    removeProjectsFromViteTsConfigPaths: ()=>removeProjectsFromViteTsConfigPaths,
    default: ()=>_default
});
const _devkit = require("@nrwl/devkit");
const _executorOptionsUtils = require("@nrwl/workspace/src/utilities/executor-options-utils");
const _tsquery = require("@phenomnomnominal/tsquery");
const _typescript = require("nx/src/utils/typescript");
const _generatorUtils = require("../../utils/generator-utils");
const ts = require("typescript");
async function removeProjectsFromViteTsConfigPaths(tree) {
    findAllProjectsWithViteConfig(tree);
    await (0, _devkit.formatFiles)(tree);
}
const _default = removeProjectsFromViteTsConfigPaths;
function findAllProjectsWithViteConfig(tree) {
    (0, _executorOptionsUtils.forEachExecutorOptions)(tree, '@nrwl/vite:build', (options, project)=>{
        const projectConfiguration = (0, _devkit.readProjectConfiguration)(tree, project);
        const viteConfig = (0, _generatorUtils.normalizeViteConfigFilePathWithTree)(tree, projectConfiguration.root, options == null ? void 0 : options['configFile']);
        if (viteConfig) {
            var ref;
            const appFileContent = tree.read(viteConfig, 'utf-8');
            const file = _tsquery.tsquery.ast(appFileContent);
            let newContents = appFileContent;
            const defineConfig = _tsquery.tsquery.query(file, 'CallExpression:has(Identifier[name="defineConfig"])');
            let startOfProjects, endOfProjects;
            defineConfig == null ? void 0 : (ref = defineConfig[0]) == null ? void 0 : ref.getChildren().forEach((defineConfigContentNode)=>{
                // Make sure it's the one we are looking for
                // We cannot assume that it's called tsConfigPaths
                // So make sure it includes `projects` and `root`
                if (defineConfigContentNode.getText().includes('projects') && defineConfigContentNode.getText().includes('root')) {
                    (0, _typescript.findNodes)(defineConfigContentNode, [
                        ts.SyntaxKind.PropertyAssignment
                    ]).forEach((nodePA)=>{
                        if (nodePA.getText().startsWith('projects')) {
                            startOfProjects = nodePA.getStart();
                            endOfProjects = nodePA.getEnd();
                        }
                    });
                }
            });
            if (startOfProjects && endOfProjects) {
                newContents = (0, _devkit.applyChangesToString)(newContents, [
                    {
                        type: _devkit.ChangeType.Delete,
                        start: startOfProjects,
                        length: endOfProjects - startOfProjects + 1
                    }
                ]);
                tree.write(viteConfig, newContents);
            }
        }
    });
}

//# sourceMappingURL=update-vite-tsconfig-paths.js.map