{"version":3,"sources":["../../../../../packages/vite/src/utils/options-utils.ts"],"sourcesContent":["import {\n  ExecutorContext,\n  joinPathFragments,\n  logger,\n  parseTargetString,\n  readTargetOptions,\n} from '@nrwl/devkit';\nimport { existsSync } from 'fs';\nimport { join, relative } from 'path';\nimport {\n  BuildOptions,\n  InlineConfig,\n  PluginOption,\n  PreviewOptions,\n  searchForWorkspaceRoot,\n  ServerOptions,\n} from 'vite';\nimport { ViteDevServerExecutorOptions } from '../executors/dev-server/schema';\nimport { VitePreviewServerExecutorOptions } from '../executors/preview-server/schema';\nimport replaceFiles from '../../plugins/rollup-replace-files.plugin';\nimport { ViteBuildExecutorOptions } from '../executors/build/schema';\nimport * as path from 'path';\n\n/**\n * Returns the path to the vite config file or undefined when not found.\n */\nexport function normalizeViteConfigFilePath(\n  projectRoot: string,\n  configFile?: string\n): string | undefined {\n  return configFile && existsSync(joinPathFragments(configFile))\n    ? configFile\n    : existsSync(joinPathFragments(`${projectRoot}/vite.config.ts`))\n    ? joinPathFragments(`${projectRoot}/vite.config.ts`)\n    : existsSync(joinPathFragments(`${projectRoot}/vite.config.js`))\n    ? joinPathFragments(`${projectRoot}/vite.config.js`)\n    : undefined;\n}\n\n/**\n * Returns the path to the proxy configuration file or undefined when not found.\n */\nexport function getViteServerProxyConfigPath(\n  nxProxyConfig: string | undefined,\n  context: ExecutorContext\n): string | undefined {\n  if (nxProxyConfig) {\n    const projectRoot =\n      context.projectsConfigurations.projects[context.projectName].root;\n\n    const proxyConfigPath = nxProxyConfig\n      ? join(context.root, nxProxyConfig)\n      : join(projectRoot, 'proxy.conf.json');\n\n    if (existsSync(proxyConfigPath)) {\n      return proxyConfigPath;\n    }\n  }\n}\n\n/**\n * Builds the shared options for vite.\n *\n * Most shared options are derived from the build target.\n */\nexport function getViteSharedConfig(\n  options: ViteBuildExecutorOptions,\n  clearScreen: boolean | undefined,\n  context: ExecutorContext\n): InlineConfig {\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n\n  const root = path.relative(\n    context.cwd,\n    joinPathFragments(context.root, projectRoot)\n  );\n\n  return {\n    mode: options.mode,\n    root,\n    base: options.base,\n    configFile: normalizeViteConfigFilePath(projectRoot, options.configFile),\n    plugins: [replaceFiles(options.fileReplacements) as PluginOption],\n    optimizeDeps: { force: options.force },\n    clearScreen: clearScreen,\n    logLevel: options.logLevel,\n  };\n}\n\n/**\n * Builds the options for the vite dev server.\n */\nexport function getViteServerOptions(\n  options: ViteDevServerExecutorOptions,\n  context: ExecutorContext\n): ServerOptions {\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n  const serverOptions: ServerOptions = {\n    host: options.host,\n    port: options.port,\n    https: options.https,\n    hmr: options.hmr,\n    open: options.open,\n    cors: options.cors,\n    fs: {\n      allow: [\n        searchForWorkspaceRoot(joinPathFragments(projectRoot)),\n        joinPathFragments(context.root, 'node_modules/vite'),\n      ],\n    },\n  };\n\n  const proxyConfigPath = getViteServerProxyConfigPath(\n    options.proxyConfig,\n    context\n  );\n  if (proxyConfigPath) {\n    logger.info(`Loading proxy configuration from: ${proxyConfigPath}`);\n    serverOptions.proxy = require(proxyConfigPath);\n  }\n\n  return serverOptions;\n}\n\n/**\n * Builds the build options for the vite.\n */\nexport function getViteBuildOptions(\n  options: ViteBuildExecutorOptions,\n  context: ExecutorContext\n): BuildOptions {\n  const projectRoot =\n    context.projectsConfigurations.projects[context.projectName].root;\n\n  return {\n    outDir: relative(projectRoot, options.outputPath),\n    emptyOutDir: true,\n    reportCompressedSize: true,\n    cssCodeSplit: true,\n    target: 'esnext',\n    commonjsOptions: {\n      transformMixedEsModules: true,\n    },\n    sourcemap: options.sourcemap,\n    minify: options.minify,\n    manifest: options.manifest,\n    ssrManifest: options.ssrManifest,\n    ssr: options.ssr,\n    watch: options.watch as BuildOptions['watch'],\n  };\n}\n\n/**\n * Builds the options for the vite preview server.\n */\nexport function getVitePreviewOptions(\n  options: VitePreviewServerExecutorOptions,\n  context: ExecutorContext\n): PreviewOptions {\n  const serverOptions: ServerOptions = {\n    host: options.host,\n    port: options.port,\n    https: options.https,\n    open: options.open,\n  };\n\n  const proxyConfigPath = getViteServerProxyConfigPath(\n    options.proxyConfig,\n    context\n  );\n  if (proxyConfigPath) {\n    logger.info(`Loading proxy configuration from: ${proxyConfigPath}`);\n    serverOptions.proxy = require(proxyConfigPath);\n  }\n\n  return serverOptions;\n}\n\nexport function getNxTargetOptions(target: string, context: ExecutorContext) {\n  const targetObj = parseTargetString(target, context.projectGraph);\n  return readTargetOptions(targetObj, context);\n}\n"],"names":["normalizeViteConfigFilePath","getViteServerProxyConfigPath","getViteSharedConfig","getViteServerOptions","getViteBuildOptions","getVitePreviewOptions","getNxTargetOptions","projectRoot","configFile","existsSync","joinPathFragments","undefined","nxProxyConfig","context","projectsConfigurations","projects","projectName","root","proxyConfigPath","join","options","clearScreen","path","relative","cwd","mode","base","plugins","replaceFiles","fileReplacements","optimizeDeps","force","logLevel","serverOptions","host","port","https","hmr","open","cors","fs","allow","searchForWorkspaceRoot","proxyConfig","logger","info","proxy","require","outDir","outputPath","emptyOutDir","reportCompressedSize","cssCodeSplit","target","commonjsOptions","transformMixedEsModules","sourcemap","minify","manifest","ssrManifest","ssr","watch","targetObj","parseTargetString","projectGraph","readTargetOptions"],"mappings":"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"}