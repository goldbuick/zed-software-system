{"version":3,"sources":["../../../../../packages/vite/src/utils/test-utils.ts"],"sourcesContent":["import { Tree, writeJson } from '@nrwl/devkit';\nimport * as reactAppConfig from './test-files/react-project.config.json';\nimport * as reactViteConfig from './test-files/react-vite-project.config.json';\nimport * as webAppConfig from './test-files/web-project.config.json';\nimport * as angularAppConfig from './test-files/angular-project.config.json';\nimport * as randomAppConfig from './test-files/unknown-project.config.json';\nimport * as mixedAppConfig from './test-files/react-mixed-project.config.json';\nimport * as reactLibNBJest from './test-files/react-lib-non-buildable-jest.json';\nimport * as reactLibNBVitest from './test-files/react-lib-non-buildable-vitest.json';\n\nexport function mockViteReactAppGenerator(tree: Tree): Tree {\n  const appName = 'my-test-react-vite-app';\n\n  tree.write(\n    `apps/${appName}/src/main.tsx`,\n    `import ReactDOM from 'react-dom';\\n`\n  );\n\n  tree.write(\n    `apps/${appName}/tsconfig.json`,\n    `{\n      \"compilerOptions\": {\n        \"jsx\": \"react-jsx\",\n        \"allowJs\": false,\n        \"esModuleInterop\": false,\n        \"allowSyntheticDefaultImports\": true,\n        \"strict\": true,\n        \"types\": [\"vite/client\"]\n      },\n      \"files\": [],\n      \"include\": [],\n      \"references\": [\n        {\n          \"path\": \"./tsconfig.app.json\"\n        },\n        {\n          \"path\": \"./tsconfig.spec.json\"\n        }\n      ],\n      \"extends\": \"../../tsconfig.base.json\"\n      }\n      `\n  );\n  tree.write(\n    `apps/${appName}/tsconfig.app.json`,\n    `{\n      \"extends\": \"./tsconfig.json\",\n      \"compilerOptions\": {\n        \"outDir\": \"../../dist/out-tsc\",\n        \"types\": [\"node\"]\n      },\n      \"files\": [\n        \"../../node_modules/@nrwl/react/typings/cssmodule.d.ts\",\n        \"../../node_modules/@nrwl/react/typings/image.d.ts\"\n      ],\n      \"exclude\": [\n        \"src/**/*.spec.ts\",\n        \"src/**/*.test.ts\",\n        \"src/**/*.spec.tsx\",\n        \"src/**/*.test.tsx\",\n        \"src/**/*.spec.js\",\n        \"src/**/*.test.js\",\n        \"src/**/*.spec.jsx\",\n        \"src/**/*.test.jsx\"\n      ],\n      \"include\": [\"src/**/*.js\", \"src/**/*.jsx\", \"src/**/*.ts\", \"src/**/*.tsx\"]\n    }   \n      `\n  );\n\n  tree.write(\n    `apps/${appName}/index.html`,\n    `<!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\" />\n        <title>Rv1</title>\n        <base href=\"/\" />\n    \n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/x-icon\" href=\"/favicon.ico\" />\n        <link rel=\"stylesheet\" href=\"/src/styles.css\" />\n      </head>\n      <body>\n        <div id=\"root\"></div>\n        <script type=\"module\" src=\"/src/main.tsx\"></script>\n      </body>\n    </html>`\n  );\n\n  tree.write(\n    `apps/${appName}/vite.config.ts`,\n    `    /// <reference types=\"vitest\" />\n    import { defineConfig } from 'vite';\n    import react from '@vitejs/plugin-react';\n    import tsconfigPaths from 'vite-tsconfig-paths';\n    \n    export default defineConfig({\n      server: {\n        port: 4200,\n        host: 'localhost',\n      },\n      plugins: [\n        react(),\n        tsconfigPaths({\n          root: '../../',\n          projects: ['tsconfig.base.json'],\n        }),\n      ],\n    \n      test: {\n        globals: true,\n        cache: {\n          dir: '../../node_modules/.vitest',\n        },\n        environment: 'jsdom',\n        include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],\n      },\n    });\n    `\n  );\n\n  writeJson(tree, 'workspace.json', {\n    projects: {\n      'my-test-react-vite-app': {\n        ...reactViteConfig,\n        root: `apps/${appName}`,\n        projectType: 'application',\n      },\n    },\n  });\n\n  writeJson(tree, `apps/${appName}/project.json`, {\n    ...reactViteConfig,\n    root: `apps/${appName}`,\n    projectType: 'application',\n  });\n\n  return tree;\n}\n\nexport function mockReactAppGenerator(tree: Tree): Tree {\n  const appName = 'my-test-react-app';\n\n  tree.write(\n    `apps/${appName}/src/main.tsx`,\n    `import ReactDOM from 'react-dom';\\n`\n  );\n\n  tree.write(\n    `apps/${appName}/tsconfig.json`,\n    `{\n        \"extends\": \"../../tsconfig.base.json\",\n        \"compilerOptions\": {\n          \"jsx\": \"react-jsx\",\n          \"allowJs\": true,\n          \"esModuleInterop\": true,\n          \"allowSyntheticDefaultImports\": true,\n          \"forceConsistentCasingInFileNames\": true,\n          \"strict\": true,\n          \"noImplicitOverride\": true,\n          \"noPropertyAccessFromIndexSignature\": true,\n          \"noImplicitReturns\": true,\n          \"noFallthroughCasesInSwitch\": true\n        },\n        \"files\": [],\n        \"include\": [],\n        \"references\": [\n          {\n            \"path\": \"./tsconfig.app.json\"\n          },\n          {\n            \"path\": \"./tsconfig.spec.json\"\n          }\n        ]\n      }\n      `\n  );\n  tree.write(\n    `apps/${appName}/tsconfig.app.json`,\n    `{\n      \"extends\": \"./tsconfig.json\",\n      \"compilerOptions\": {\n        \"outDir\": \"../../dist/out-tsc\"\n      },\n      \"files\": [\n        \"../../node_modules/@nrwl/react/typings/cssmodule.d.ts\",\n        \"../../node_modules/@nrwl/react/typings/image.d.ts\"\n      ],\n      \"exclude\": [\n        \"jest.config.ts\",\n        \"**/*.spec.ts\",\n        \"**/*.test.ts\",\n        \"**/*.spec.tsx\",\n        \"**/*.test.tsx\",\n        \"**/*.spec.js\",\n        \"**/*.test.js\",\n        \"**/*.spec.jsx\",\n        \"**/*.test.jsx\"\n      ],\n      \"include\": [\"**/*.js\", \"**/*.jsx\", \"**/*.ts\", \"**/*.tsx\"]\n    }   \n      `\n  );\n\n  tree.write(\n    `apps/${appName}/src/index.html`,\n    `<!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\" />\n        <title>My Test React App</title>\n        <base href=\"/\" />\n    \n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" />\n      </head>\n      <body>\n        <div id=\"root\"></div>\n      </body>\n    </html>`\n  );\n\n  writeJson(tree, 'workspace.json', {\n    projects: {\n      'my-test-react-app': {\n        ...reactAppConfig,\n        root: `apps/${appName}`,\n        projectType: 'application',\n      },\n    },\n  });\n\n  writeJson(tree, `apps/${appName}/project.json`, {\n    ...reactAppConfig,\n    root: `apps/${appName}`,\n    projectType: 'application',\n  });\n\n  return tree;\n}\nexport function mockReactMixedAppGenerator(tree: Tree): Tree {\n  const appName = 'my-test-mixed-react-app';\n\n  tree.write(\n    `apps/${appName}/src/main.tsx`,\n    `import ReactDOM from 'react-dom';\\n`\n  );\n\n  tree.write(\n    `apps/${appName}/tsconfig.json`,\n    `{\n        \"extends\": \"../../tsconfig.base.json\",\n        \"compilerOptions\": {\n          \"jsx\": \"react-jsx\",\n          \"allowJs\": true,\n          \"esModuleInterop\": true,\n          \"allowSyntheticDefaultImports\": true,\n          \"forceConsistentCasingInFileNames\": true,\n          \"strict\": true,\n          \"noImplicitOverride\": true,\n          \"noPropertyAccessFromIndexSignature\": true,\n          \"noImplicitReturns\": true,\n          \"noFallthroughCasesInSwitch\": true\n        },\n        \"files\": [],\n        \"include\": [],\n        \"references\": [\n          {\n            \"path\": \"./tsconfig.app.json\"\n          },\n          {\n            \"path\": \"./tsconfig.spec.json\"\n          }\n        ]\n      }\n      `\n  );\n  tree.write(\n    `apps/${appName}/tsconfig.app.json`,\n    `{\n      \"extends\": \"./tsconfig.json\",\n      \"compilerOptions\": {\n        \"outDir\": \"../../dist/out-tsc\"\n      },\n      \"files\": [\n        \"../../node_modules/@nrwl/react/typings/cssmodule.d.ts\",\n        \"../../node_modules/@nrwl/react/typings/image.d.ts\"\n      ],\n      \"exclude\": [\n        \"jest.config.ts\",\n        \"**/*.spec.ts\",\n        \"**/*.test.ts\",\n        \"**/*.spec.tsx\",\n        \"**/*.test.tsx\",\n        \"**/*.spec.js\",\n        \"**/*.test.js\",\n        \"**/*.spec.jsx\",\n        \"**/*.test.jsx\"\n      ],\n      \"include\": [\"**/*.js\", \"**/*.jsx\", \"**/*.ts\", \"**/*.tsx\"]\n    }   \n      `\n  );\n\n  tree.write(\n    `apps/${appName}/src/index.html`,\n    `<!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\" />\n        <title>My Test React App</title>\n        <base href=\"/\" />\n    \n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" />\n      </head>\n      <body>\n        <div id=\"root\"></div>\n      </body>\n    </html>`\n  );\n\n  writeJson(tree, 'workspace.json', {\n    projects: {\n      'my-test-mixed-react-app': {\n        ...mixedAppConfig,\n        root: `apps/${appName}`,\n        projectType: 'application',\n      },\n    },\n  });\n\n  writeJson(tree, `apps/${appName}/project.json`, {\n    ...mixedAppConfig,\n    root: `apps/${appName}`,\n    projectType: 'application',\n  });\n\n  return tree;\n}\n\nexport function mockWebAppGenerator(tree: Tree): Tree {\n  const appName = 'my-test-web-app';\n\n  tree.write(`apps/${appName}/src/main.ts`, `import './app/app.element.ts';`);\n\n  tree.write(\n    `apps/${appName}/tsconfig.json`,\n    `{\n        \"extends\": \"../../tsconfig.base.json\",\n        \"files\": [],\n        \"include\": [],\n        \"references\": [\n          {\n            \"path\": \"./tsconfig.app.json\"\n          },\n          {\n            \"path\": \"./tsconfig.spec.json\"\n          }\n        ]\n      }      \n        `\n  );\n\n  tree.write(\n    `apps/${appName}/src/index.html`,\n    `<!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"utf-8\" />\n        <title>WebappPure</title>\n        <base href=\"/\" />\n    \n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <link rel=\"icon\" type=\"image/x-icon\" href=\"favicon.ico\" />\n      </head>\n      <body>\n        <workspace-root></workspace-root>\n      </body>\n    </html>\n    `\n  );\n\n  writeJson(\n    tree,\n    'workspace.json',\n\n    {\n      projects: {\n        'my-test-web-app': {\n          ...webAppConfig,\n          root: `apps/${appName}`,\n          projectType: 'application',\n        },\n      },\n    }\n  );\n\n  writeJson(tree, `apps/${appName}/project.json`, {\n    ...webAppConfig,\n    root: `apps/${appName}`,\n    projectType: 'application',\n  });\n  return tree;\n}\n\nexport function mockAngularAppGenerator(tree: Tree): Tree {\n  const appName = 'my-test-angular-app';\n\n  writeJson(tree, 'workspace.json', {\n    projects: {\n      'my-test-angular-app': {\n        ...angularAppConfig,\n        root: `apps/${appName}`,\n        projectType: 'application',\n      },\n    },\n  });\n\n  writeJson(tree, `apps/${appName}/project.json`, {\n    ...angularAppConfig,\n    root: `apps/${appName}`,\n    projectType: 'application',\n  });\n\n  return tree;\n}\n\nexport function mockUnknownAppGenerator(tree: Tree): Tree {\n  const appName = 'my-test-random-app';\n\n  writeJson(tree, 'workspace.json', {\n    projects: {\n      'my-test-random-app': {\n        ...randomAppConfig,\n        root: `apps/${appName}`,\n        projectType: 'application',\n      },\n    },\n  });\n\n  writeJson(tree, `apps/${appName}/project.json`, {\n    ...randomAppConfig,\n    root: `apps/${appName}`,\n    projectType: 'application',\n  });\n\n  return tree;\n}\n\nexport function mockReactLibNonBuildableJestTestRunnerGenerator(\n  tree: Tree\n): Tree {\n  const libName = 'react-lib-nonb-jest';\n\n  tree.write(`libs/${libName}/src/index.ts`, ``);\n\n  tree.write(\n    `libs/${libName}/tsconfig.json`,\n    `{\n      \"compilerOptions\": {\n        \"jsx\": \"react-jsx\",\n        \"allowJs\": false,\n        \"esModuleInterop\": false,\n        \"allowSyntheticDefaultImports\": true,\n        \"strict\": true\n      },\n      \"files\": [],\n      \"include\": [],\n      \"references\": [\n        {\n          \"path\": \"./tsconfig.lib.json\"\n        },\n        {\n          \"path\": \"./tsconfig.spec.json\"\n        }\n      ],\n      \"extends\": \"../../tsconfig.base.json\"\n    }`\n  );\n  tree.write(\n    `libs/${libName}/tsconfig.lib.json`,\n    `{\n      \"extends\": \"./tsconfig.json\",\n      \"compilerOptions\": {\n        \"outDir\": \"../../dist/out-tsc\",\n        \"types\": [\"node\"]\n      },\n      \"files\": [\n        \"../../node_modules/@nrwl/react/typings/cssmodule.d.ts\",\n        \"../../node_modules/@nrwl/react/typings/image.d.ts\"\n      ],\n      \"exclude\": [\n        \"jest.config.ts\",\n        \"src/**/*.spec.ts\",\n        \"src/**/*.test.ts\",\n        \"src/**/*.spec.tsx\",\n        \"src/**/*.test.tsx\",\n        \"src/**/*.spec.js\",\n        \"src/**/*.test.js\",\n        \"src/**/*.spec.jsx\",\n        \"src/**/*.test.jsx\"\n      ],\n      \"include\": [\"src/**/*.js\", \"src/**/*.jsx\", \"src/**/*.ts\", \"src/**/*.tsx\"]\n    }`\n  );\n\n  writeJson(tree, 'workspace.json', {\n    projects: {\n      [`${libName}`]: {\n        ...reactLibNBJest,\n        root: `libs/${libName}`,\n        projectType: 'library',\n      },\n    },\n  });\n\n  writeJson(tree, `libs/${libName}/project.json`, {\n    ...reactLibNBJest,\n    root: `libs/${libName}`,\n    projectType: 'library',\n  });\n\n  return tree;\n}\n\nexport function mockReactLibNonBuildableVitestRunnerGenerator(\n  tree: Tree\n): Tree {\n  const libName = 'react-lib-nonb-vitest';\n\n  tree.write(`libs/${libName}/src/index.ts`, ``);\n\n  tree.write(\n    `libs/${libName}/vite.config.ts`,\n    `/// <reference types=\"vitest\" />\n    import { defineConfig } from 'vite';\n    import react from '@vitejs/plugin-react';\n    import viteTsConfigPaths from 'vite-tsconfig-paths';\n\n    export default defineConfig({\n\n      plugins: [\n        react(),\n        viteTsConfigPaths({\n          root: '../../',\n        }),\n      ],\n\n      test: {\n        globals: true,\n        cache: {\n          dir: '../../node_modules/.vitest',\n        },\n        environment: 'jsdom',\n        include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],\n      },\n    });\n  `\n  );\n\n  tree.write(\n    `libs/${libName}/tsconfig.json`,\n    `{\n      \"compilerOptions\": {\n        \"jsx\": \"react-jsx\",\n        \"allowJs\": false,\n        \"esModuleInterop\": false,\n        \"allowSyntheticDefaultImports\": true,\n        \"strict\": true\n      },\n      \"files\": [],\n      \"include\": [],\n      \"references\": [\n        {\n          \"path\": \"./tsconfig.lib.json\"\n        },\n        {\n          \"path\": \"./tsconfig.spec.json\"\n        }\n      ],\n      \"extends\": \"../../tsconfig.base.json\"\n    }`\n  );\n  tree.write(\n    `libs/${libName}/tsconfig.lib.json`,\n    `{\n      \"extends\": \"./tsconfig.json\",\n      \"compilerOptions\": {\n        \"outDir\": \"../../dist/out-tsc\",\n        \"types\": [\"node\"]\n      },\n      \"files\": [\n        \"../../node_modules/@nrwl/react/typings/cssmodule.d.ts\",\n        \"../../node_modules/@nrwl/react/typings/image.d.ts\"\n      ],\n      \"exclude\": [\n        \"**/*.spec.ts\",\n        \"**/*.test.ts\",\n        \"**/*.spec.tsx\",\n        \"**/*.test.tsx\",\n        \"**/*.spec.js\",\n        \"**/*.test.js\",\n        \"**/*.spec.jsx\",\n        \"**/*.test.jsx\"\n      ],\n      \"include\": [\"**/*.js\", \"**/*.jsx\", \"**/*.ts\", \"**/*.tsx\"]\n    }`\n  );\n\n  writeJson(tree, 'workspace.json', {\n    projects: {\n      [`${libName}`]: {\n        ...reactLibNBVitest,\n        root: `libs/${libName}`,\n        projectType: 'library',\n      },\n    },\n  });\n\n  writeJson(tree, `libs/${libName}/project.json`, {\n    ...reactLibNBVitest,\n    root: `libs/${libName}`,\n    projectType: 'library',\n  });\n\n  return tree;\n}\n"],"names":["mockViteReactAppGenerator","mockReactAppGenerator","mockReactMixedAppGenerator","mockWebAppGenerator","mockAngularAppGenerator","mockUnknownAppGenerator","mockReactLibNonBuildableJestTestRunnerGenerator","mockReactLibNonBuildableVitestRunnerGenerator","tree","appName","write","writeJson","projects","reactViteConfig","root","projectType","reactAppConfig","mixedAppConfig","webAppConfig","angularAppConfig","randomAppConfig","libName","reactLibNBJest","reactLibNBVitest"],"mappings":"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"}