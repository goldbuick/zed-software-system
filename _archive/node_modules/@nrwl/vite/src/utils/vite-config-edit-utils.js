"use strict";
Object.defineProperty(exports, "ensureViteConfigIsCorrect", {
    enumerable: true,
    get: ()=>ensureViteConfigIsCorrect
});
const _devkit = require("@nrwl/devkit");
const _typescript = require("nx/src/utils/typescript");
function ensureViteConfigIsCorrect(tree, path, buildConfigString, buildConfigObject, dtsPlugin, dtsImportLine, pluginOption, testConfigString, testConfigObject, cacheDir, projectAlreadyHasViteTargets) {
    const fileContent = tree.read(path, 'utf-8');
    let updatedContent = undefined;
    if (!(projectAlreadyHasViteTargets == null ? void 0 : projectAlreadyHasViteTargets.test) && (testConfigString == null ? void 0 : testConfigString.length)) {
        updatedContent = handleBuildOrTestNode(fileContent, testConfigString, testConfigObject, 'test');
    }
    if (!(projectAlreadyHasViteTargets == null ? void 0 : projectAlreadyHasViteTargets.build) && (buildConfigString == null ? void 0 : buildConfigString.length)) {
        updatedContent = handlePluginNode(updatedContent != null ? updatedContent : fileContent, dtsPlugin, dtsImportLine, pluginOption);
        updatedContent = handleBuildOrTestNode(updatedContent != null ? updatedContent : fileContent, buildConfigString, buildConfigObject, 'build');
    }
    if (cacheDir == null ? void 0 : cacheDir.length) {
        updatedContent = handleCacheDirNode(updatedContent != null ? updatedContent : fileContent, cacheDir);
    }
    if (updatedContent) {
        tree.write(path, updatedContent);
        return true;
    } else {
        return false;
    }
}
function handleBuildOrTestNode(updatedFileContent, configContentString, configContentObject, name) {
    const { tsquery  } = require('@phenomnomnominal/tsquery');
    const buildNode = tsquery.query(updatedFileContent, `PropertyAssignment:has(Identifier[name="${name}"])`);
    if (buildNode.length) {
        return tsquery.replace(updatedFileContent, `PropertyAssignment:has(Identifier[name="${name}"])`, (node)=>{
            const found = tsquery.query(node, 'ObjectLiteralExpression');
            return `${name}: {
                  ...${found == null ? void 0 : found[0].getText()},
                  ...${JSON.stringify(configContentObject)}
               }`;
        });
    } else {
        const foundDefineConfig = tsquery.query(updatedFileContent, 'CallExpression:has(Identifier[name="defineConfig"])');
        if (foundDefineConfig.length) {
            const conditionalConfig = tsquery.query(foundDefineConfig[0], 'ArrowFunction');
            if (conditionalConfig.length) {
                if (name === 'build') {
                    return transformConditionalConfig(conditionalConfig, updatedFileContent, configContentString);
                } else {
                    // no test config in conditional config
                    return updatedFileContent;
                }
            } else {
                const propertyAssignments = tsquery.query(foundDefineConfig[0], 'PropertyAssignment');
                if (propertyAssignments.length) {
                    return (0, _devkit.applyChangesToString)(updatedFileContent, [
                        {
                            type: _devkit.ChangeType.Insert,
                            index: propertyAssignments[0].getStart(),
                            text: configContentString
                        }
                    ]);
                } else {
                    return (0, _devkit.applyChangesToString)(updatedFileContent, [
                        {
                            type: _devkit.ChangeType.Insert,
                            index: foundDefineConfig[0].getStart() + 14,
                            text: configContentString
                        }
                    ]);
                }
            }
        } else {
            // build config does not exist and defineConfig is not used
            // could also potentially be invalid syntax, so try-catch
            try {
                const defaultExport = tsquery.query(updatedFileContent, 'ExportAssignment');
                const found = tsquery.query(defaultExport == null ? void 0 : defaultExport[0], 'ObjectLiteralExpression');
                const startOfObject = found == null ? void 0 : found[0].getStart();
                return (0, _devkit.applyChangesToString)(updatedFileContent, [
                    {
                        type: _devkit.ChangeType.Insert,
                        index: startOfObject + 1,
                        text: configContentString
                    }
                ]);
            } catch (e) {
                return updatedFileContent;
            }
        }
    }
}
function transformCurrentBuildObject(index, returnStatements, appFileContent, buildConfigObject) {
    var ref;
    if (!(returnStatements == null ? void 0 : returnStatements[index])) {
        return undefined;
    }
    const { tsquery  } = require('@phenomnomnominal/tsquery');
    const currentBuildObject = (ref = tsquery.query(returnStatements[index], 'ObjectLiteralExpression')) == null ? void 0 : ref[0].getText();
    const currentBuildObjectStart = returnStatements[index].getStart();
    const currentBuildObjectEnd = returnStatements[index].getEnd();
    const newReturnObject = tsquery.replace(returnStatements[index].getText(), 'ObjectLiteralExpression', (_node)=>{
        return `{
        ...${currentBuildObject},
        ...${JSON.stringify(buildConfigObject)}
     }`;
    });
    const newContents = (0, _devkit.applyChangesToString)(appFileContent, [
        {
            type: _devkit.ChangeType.Delete,
            start: currentBuildObjectStart,
            length: currentBuildObjectEnd - currentBuildObjectStart
        },
        {
            type: _devkit.ChangeType.Insert,
            index: currentBuildObjectStart,
            text: newReturnObject
        }
    ]);
    return newContents;
}
function transformConditionalConfig(conditionalConfig, appFileContent, buildConfigObject) {
    const { tsquery  } = require('@phenomnomnominal/tsquery');
    const { SyntaxKind  } = require('typescript');
    const functionBlock = tsquery.query(conditionalConfig[0], 'Block');
    const ifStatement = tsquery.query(functionBlock == null ? void 0 : functionBlock[0], 'IfStatement');
    const binaryExpressions = tsquery.query(ifStatement == null ? void 0 : ifStatement[0], 'BinaryExpression');
    const buildExists = binaryExpressions == null ? void 0 : binaryExpressions.find((binaryExpression)=>binaryExpression.getText() === `command === 'build'`);
    const buildExistsExpressionIndex = binaryExpressions == null ? void 0 : binaryExpressions.findIndex((binaryExpression)=>binaryExpression.getText() === `command === 'build'`);
    const serveExists = binaryExpressions == null ? void 0 : binaryExpressions.find((binaryExpression)=>binaryExpression.getText() === `command === 'serve'`);
    const elseKeywordExists = (0, _typescript.findNodes)(ifStatement == null ? void 0 : ifStatement[0], SyntaxKind.ElseKeyword);
    const returnStatements = tsquery.query(ifStatement[0], 'ReturnStatement');
    if (!buildExists) {
        if (serveExists && elseKeywordExists) {
            var ref;
            // build options live inside the else block
            return (ref = transformCurrentBuildObject((returnStatements == null ? void 0 : returnStatements.length) - 1, returnStatements, appFileContent, buildConfigObject)) != null ? ref : appFileContent;
        } else {
            // no build options exist yet
            const functionBlockStart = functionBlock == null ? void 0 : functionBlock[0].getStart();
            const newContents = (0, _devkit.applyChangesToString)(appFileContent, [
                {
                    type: _devkit.ChangeType.Insert,
                    index: functionBlockStart + 1,
                    text: `
            if (command === 'build') {
              return ${JSON.stringify(buildConfigObject)}
            }
            `
                }
            ]);
            return newContents;
        }
    } else {
        var ref1;
        // build already exists
        // it will be the return statement which lives
        // at the buildExistsExpressionIndex
        return (ref1 = transformCurrentBuildObject(buildExistsExpressionIndex, returnStatements, appFileContent, buildConfigObject)) != null ? ref1 : appFileContent;
    }
}
function handlePluginNode(appFileContent, dtsPlugin, dtsImportLine, pluginOption) {
    const { tsquery  } = require('@phenomnomnominal/tsquery');
    const file = tsquery.ast(appFileContent);
    const pluginsNode = tsquery.query(file, 'PropertyAssignment:has(Identifier[name="plugins"])');
    let writeFile = false;
    if (pluginsNode.length) {
        appFileContent = tsquery.replace(file.getText(), 'PropertyAssignment:has(Identifier[name="plugins"])', (node)=>{
            const found = tsquery.query(node, 'ArrayLiteralExpression');
            return `plugins: [
                    ...${found == null ? void 0 : found[0].getText()},
                    ${dtsPlugin}
                ]`;
        });
        writeFile = true;
    } else {
        // Plugins node does not exist yet
        // So make one from scratch
        const foundDefineConfig = tsquery.query(file, 'CallExpression:has(Identifier[name="defineConfig"])');
        if (foundDefineConfig.length) {
            const conditionalConfig = tsquery.query(foundDefineConfig[0], 'ArrowFunction');
            if (conditionalConfig.length) {
                // We are NOT transforming the conditional config
                // with plugins
                writeFile = false;
            } else {
                const propertyAssignments = tsquery.query(foundDefineConfig[0], 'PropertyAssignment');
                if (propertyAssignments.length) {
                    appFileContent = (0, _devkit.applyChangesToString)(appFileContent, [
                        {
                            type: _devkit.ChangeType.Insert,
                            index: propertyAssignments[0].getStart(),
                            text: pluginOption
                        }
                    ]);
                    writeFile = true;
                } else {
                    appFileContent = (0, _devkit.applyChangesToString)(appFileContent, [
                        {
                            type: _devkit.ChangeType.Insert,
                            index: foundDefineConfig[0].getStart() + 14,
                            text: pluginOption
                        }
                    ]);
                    writeFile = true;
                }
            }
        } else {
            // Plugins option does not exist and defineConfig is not used
            // could also potentially be invalid syntax, so try-catch
            try {
                const defaultExport = tsquery.query(file, 'ExportAssignment');
                const found = tsquery == null ? void 0 : tsquery.query(defaultExport == null ? void 0 : defaultExport[0], 'ObjectLiteralExpression');
                const startOfObject = found == null ? void 0 : found[0].getStart();
                appFileContent = (0, _devkit.applyChangesToString)(appFileContent, [
                    {
                        type: _devkit.ChangeType.Insert,
                        index: startOfObject + 1,
                        text: pluginOption
                    }
                ]);
                writeFile = true;
            } catch (e) {
                writeFile = false;
            }
        }
    }
    if (writeFile) {
        if (!appFileContent.includes(`import dts from 'vite-plugin-dts'`)) {
            return dtsImportLine + '\n' + appFileContent;
        }
        return appFileContent;
    }
    return appFileContent;
}
function handleCacheDirNode(appFileContent, cacheDir) {
    const { tsquery  } = require('@phenomnomnominal/tsquery');
    const file = tsquery.ast(appFileContent);
    const cacheDirNode = tsquery.query(file, 'PropertyAssignment:has(Identifier[name="cacheDir"])');
    if (!(cacheDirNode == null ? void 0 : cacheDirNode.length) || (cacheDirNode == null ? void 0 : cacheDirNode.length) === 0) {
        // cacheDir node does not exist yet
        // So make one from scratch
        const foundDefineConfig = tsquery.query(file, 'CallExpression:has(Identifier[name="defineConfig"])');
        if (foundDefineConfig.length) {
            const conditionalConfig = tsquery.query(foundDefineConfig[0], 'ArrowFunction');
            if (conditionalConfig.length) {
            // We are NOT transforming the conditional config
            // with cacheDir
            } else {
                const propertyAssignments = tsquery.query(foundDefineConfig[0], 'PropertyAssignment');
                if (propertyAssignments.length) {
                    appFileContent = (0, _devkit.applyChangesToString)(appFileContent, [
                        {
                            type: _devkit.ChangeType.Insert,
                            index: propertyAssignments[0].getStart(),
                            text: cacheDir
                        }
                    ]);
                } else {
                    appFileContent = (0, _devkit.applyChangesToString)(appFileContent, [
                        {
                            type: _devkit.ChangeType.Insert,
                            index: foundDefineConfig[0].getStart() + 14,
                            text: cacheDir
                        }
                    ]);
                }
            }
        } else {
            // cacheDir option does not exist and defineConfig is not used
            // could also potentially be invalid syntax, so try-catch
            try {
                const defaultExport = tsquery.query(file, 'ExportAssignment');
                const found = tsquery == null ? void 0 : tsquery.query(defaultExport == null ? void 0 : defaultExport[0], 'ObjectLiteralExpression');
                const startOfObject = found == null ? void 0 : found[0].getStart();
                appFileContent = (0, _devkit.applyChangesToString)(appFileContent, [
                    {
                        type: _devkit.ChangeType.Insert,
                        index: startOfObject + 1,
                        text: cacheDir
                    }
                ]);
            } catch (e) {}
        }
    }
    return appFileContent;
}

//# sourceMappingURL=vite-config-edit-utils.js.map