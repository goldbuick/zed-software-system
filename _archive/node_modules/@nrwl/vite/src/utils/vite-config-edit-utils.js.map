{"version":3,"sources":["../../../../../packages/vite/src/utils/vite-config-edit-utils.ts"],"sourcesContent":["import { applyChangesToString, ChangeType, Tree } from '@nrwl/devkit';\nimport { findNodes } from 'nx/src/utils/typescript';\nimport { TargetFlags } from './generator-utils';\nimport type { Node, ReturnStatement } from 'typescript';\n\nexport function ensureViteConfigIsCorrect(\n  tree: Tree,\n  path: string,\n  buildConfigString: string,\n  buildConfigObject: {},\n  dtsPlugin: string,\n  dtsImportLine: string,\n  pluginOption: string,\n  testConfigString: string,\n  testConfigObject: {},\n  cacheDir: string,\n  projectAlreadyHasViteTargets?: TargetFlags\n): boolean {\n  const fileContent = tree.read(path, 'utf-8');\n\n  let updatedContent = undefined;\n\n  if (!projectAlreadyHasViteTargets?.test && testConfigString?.length) {\n    updatedContent = handleBuildOrTestNode(\n      fileContent,\n      testConfigString,\n      testConfigObject,\n      'test'\n    );\n  }\n\n  if (!projectAlreadyHasViteTargets?.build && buildConfigString?.length) {\n    updatedContent = handlePluginNode(\n      updatedContent ?? fileContent,\n      dtsPlugin,\n      dtsImportLine,\n      pluginOption\n    );\n\n    updatedContent = handleBuildOrTestNode(\n      updatedContent ?? fileContent,\n      buildConfigString,\n      buildConfigObject,\n      'build'\n    );\n  }\n\n  if (cacheDir?.length) {\n    updatedContent = handleCacheDirNode(\n      updatedContent ?? fileContent,\n      cacheDir\n    );\n  }\n  if (updatedContent) {\n    tree.write(path, updatedContent);\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction handleBuildOrTestNode(\n  updatedFileContent: string,\n  configContentString: string,\n  configContentObject: {},\n  name: 'build' | 'test'\n): string | undefined {\n  const { tsquery } = require('@phenomnomnominal/tsquery');\n  const buildNode = tsquery.query(\n    updatedFileContent,\n    `PropertyAssignment:has(Identifier[name=\"${name}\"])`\n  );\n\n  if (buildNode.length) {\n    return tsquery.replace(\n      updatedFileContent,\n      `PropertyAssignment:has(Identifier[name=\"${name}\"])`,\n      (node: Node) => {\n        const found = tsquery.query(node, 'ObjectLiteralExpression');\n        return `${name}: {\n                  ...${found?.[0].getText()},\n                  ...${JSON.stringify(configContentObject)}\n               }`;\n      }\n    );\n  } else {\n    const foundDefineConfig = tsquery.query(\n      updatedFileContent,\n      'CallExpression:has(Identifier[name=\"defineConfig\"])'\n    );\n\n    if (foundDefineConfig.length) {\n      const conditionalConfig = tsquery.query(\n        foundDefineConfig[0],\n        'ArrowFunction'\n      );\n\n      if (conditionalConfig.length) {\n        if (name === 'build') {\n          return transformConditionalConfig(\n            conditionalConfig,\n            updatedFileContent,\n            configContentString\n          );\n        } else {\n          // no test config in conditional config\n          return updatedFileContent;\n        }\n      } else {\n        const propertyAssignments = tsquery.query(\n          foundDefineConfig[0],\n          'PropertyAssignment'\n        );\n\n        if (propertyAssignments.length) {\n          return applyChangesToString(updatedFileContent, [\n            {\n              type: ChangeType.Insert,\n              index: propertyAssignments[0].getStart(),\n              text: configContentString,\n            },\n          ]);\n        } else {\n          return applyChangesToString(updatedFileContent, [\n            {\n              type: ChangeType.Insert,\n              index: foundDefineConfig[0].getStart() + 14,\n              text: configContentString,\n            },\n          ]);\n        }\n      }\n    } else {\n      // build config does not exist and defineConfig is not used\n      // could also potentially be invalid syntax, so try-catch\n      try {\n        const defaultExport = tsquery.query(\n          updatedFileContent,\n          'ExportAssignment'\n        );\n        const found = tsquery.query(\n          defaultExport?.[0],\n          'ObjectLiteralExpression'\n        );\n        const startOfObject = found?.[0].getStart();\n        return applyChangesToString(updatedFileContent, [\n          {\n            type: ChangeType.Insert,\n            index: startOfObject + 1,\n            text: configContentString,\n          },\n        ]);\n      } catch {\n        return updatedFileContent;\n      }\n    }\n  }\n}\n\nfunction transformCurrentBuildObject(\n  index: number,\n  returnStatements: ReturnStatement[],\n  appFileContent: string,\n  buildConfigObject: {}\n): string | undefined {\n  if (!returnStatements?.[index]) {\n    return undefined;\n  }\n  const { tsquery } = require('@phenomnomnominal/tsquery');\n  const currentBuildObject = tsquery\n    .query(returnStatements[index], 'ObjectLiteralExpression')?.[0]\n    .getText();\n\n  const currentBuildObjectStart = returnStatements[index].getStart();\n  const currentBuildObjectEnd = returnStatements[index].getEnd();\n\n  const newReturnObject = tsquery.replace(\n    returnStatements[index].getText(),\n    'ObjectLiteralExpression',\n    (_node: Node) => {\n      return `{\n        ...${currentBuildObject},\n        ...${JSON.stringify(buildConfigObject)}\n     }`;\n    }\n  );\n\n  const newContents = applyChangesToString(appFileContent, [\n    {\n      type: ChangeType.Delete,\n      start: currentBuildObjectStart,\n      length: currentBuildObjectEnd - currentBuildObjectStart,\n    },\n    {\n      type: ChangeType.Insert,\n      index: currentBuildObjectStart,\n      text: newReturnObject,\n    },\n  ]);\n\n  return newContents;\n}\n\nfunction transformConditionalConfig(\n  conditionalConfig: Node[],\n  appFileContent: string,\n  buildConfigObject: {}\n): string | undefined {\n  const { tsquery } = require('@phenomnomnominal/tsquery');\n  const { SyntaxKind } = require('typescript');\n  const functionBlock = tsquery.query(conditionalConfig[0], 'Block');\n\n  const ifStatement = tsquery.query(functionBlock?.[0], 'IfStatement');\n\n  const binaryExpressions = tsquery.query(ifStatement?.[0], 'BinaryExpression');\n\n  const buildExists = binaryExpressions?.find(\n    (binaryExpression) => binaryExpression.getText() === `command === 'build'`\n  );\n\n  const buildExistsExpressionIndex = binaryExpressions?.findIndex(\n    (binaryExpression) => binaryExpression.getText() === `command === 'build'`\n  );\n\n  const serveExists = binaryExpressions?.find(\n    (binaryExpression) => binaryExpression.getText() === `command === 'serve'`\n  );\n\n  const elseKeywordExists = findNodes(ifStatement?.[0], SyntaxKind.ElseKeyword);\n  const returnStatements: ReturnStatement[] = tsquery.query(\n    ifStatement[0],\n    'ReturnStatement'\n  );\n\n  if (!buildExists) {\n    if (serveExists && elseKeywordExists) {\n      // build options live inside the else block\n\n      return (\n        transformCurrentBuildObject(\n          returnStatements?.length - 1,\n          returnStatements,\n          appFileContent,\n          buildConfigObject\n        ) ?? appFileContent\n      );\n    } else {\n      // no build options exist yet\n      const functionBlockStart = functionBlock?.[0].getStart();\n      const newContents = applyChangesToString(appFileContent, [\n        {\n          type: ChangeType.Insert,\n          index: functionBlockStart + 1,\n          text: `\n            if (command === 'build') {\n              return ${JSON.stringify(buildConfigObject)}\n            }\n            `,\n        },\n      ]);\n      return newContents;\n    }\n  } else {\n    // build already exists\n    // it will be the return statement which lives\n    // at the buildExistsExpressionIndex\n\n    return (\n      transformCurrentBuildObject(\n        buildExistsExpressionIndex,\n        returnStatements,\n        appFileContent,\n        buildConfigObject\n      ) ?? appFileContent\n    );\n  }\n}\n\nfunction handlePluginNode(\n  appFileContent: string,\n  dtsPlugin: string,\n  dtsImportLine: string,\n  pluginOption: string\n): string | undefined {\n  const { tsquery } = require('@phenomnomnominal/tsquery');\n\n  const file = tsquery.ast(appFileContent);\n  const pluginsNode = tsquery.query(\n    file,\n    'PropertyAssignment:has(Identifier[name=\"plugins\"])'\n  );\n\n  let writeFile = false;\n\n  if (pluginsNode.length) {\n    appFileContent = tsquery.replace(\n      file.getText(),\n      'PropertyAssignment:has(Identifier[name=\"plugins\"])',\n      (node: Node) => {\n        const found = tsquery.query(node, 'ArrayLiteralExpression');\n        return `plugins: [\n                    ...${found?.[0].getText()},\n                    ${dtsPlugin}\n                ]`;\n      }\n    );\n    writeFile = true;\n  } else {\n    // Plugins node does not exist yet\n    // So make one from scratch\n\n    const foundDefineConfig = tsquery.query(\n      file,\n      'CallExpression:has(Identifier[name=\"defineConfig\"])'\n    );\n\n    if (foundDefineConfig.length) {\n      const conditionalConfig = tsquery.query(\n        foundDefineConfig[0],\n        'ArrowFunction'\n      );\n\n      if (conditionalConfig.length) {\n        // We are NOT transforming the conditional config\n        // with plugins\n        writeFile = false;\n      } else {\n        const propertyAssignments = tsquery.query(\n          foundDefineConfig[0],\n          'PropertyAssignment'\n        );\n\n        if (propertyAssignments.length) {\n          appFileContent = applyChangesToString(appFileContent, [\n            {\n              type: ChangeType.Insert,\n              index: propertyAssignments[0].getStart(),\n              text: pluginOption,\n            },\n          ]);\n          writeFile = true;\n        } else {\n          appFileContent = applyChangesToString(appFileContent, [\n            {\n              type: ChangeType.Insert,\n              index: foundDefineConfig[0].getStart() + 14,\n              text: pluginOption,\n            },\n          ]);\n          writeFile = true;\n        }\n      }\n    } else {\n      // Plugins option does not exist and defineConfig is not used\n      // could also potentially be invalid syntax, so try-catch\n      try {\n        const defaultExport = tsquery.query(file, 'ExportAssignment');\n        const found = tsquery?.query(\n          defaultExport?.[0],\n          'ObjectLiteralExpression'\n        );\n        const startOfObject = found?.[0].getStart();\n        appFileContent = applyChangesToString(appFileContent, [\n          {\n            type: ChangeType.Insert,\n            index: startOfObject + 1,\n            text: pluginOption,\n          },\n        ]);\n        writeFile = true;\n      } catch {\n        writeFile = false;\n      }\n    }\n  }\n\n  if (writeFile) {\n    if (!appFileContent.includes(`import dts from 'vite-plugin-dts'`)) {\n      return dtsImportLine + '\\n' + appFileContent;\n    }\n    return appFileContent;\n  }\n  return appFileContent;\n}\n\nfunction handleCacheDirNode(appFileContent: string, cacheDir: string): string {\n  const { tsquery } = require('@phenomnomnominal/tsquery');\n\n  const file = tsquery.ast(appFileContent);\n  const cacheDirNode = tsquery.query(\n    file,\n    'PropertyAssignment:has(Identifier[name=\"cacheDir\"])'\n  );\n\n  if (!cacheDirNode?.length || cacheDirNode?.length === 0) {\n    // cacheDir node does not exist yet\n    // So make one from scratch\n\n    const foundDefineConfig = tsquery.query(\n      file,\n      'CallExpression:has(Identifier[name=\"defineConfig\"])'\n    );\n\n    if (foundDefineConfig.length) {\n      const conditionalConfig = tsquery.query(\n        foundDefineConfig[0],\n        'ArrowFunction'\n      );\n\n      if (conditionalConfig.length) {\n        // We are NOT transforming the conditional config\n        // with cacheDir\n      } else {\n        const propertyAssignments = tsquery.query(\n          foundDefineConfig[0],\n          'PropertyAssignment'\n        );\n\n        if (propertyAssignments.length) {\n          appFileContent = applyChangesToString(appFileContent, [\n            {\n              type: ChangeType.Insert,\n              index: propertyAssignments[0].getStart(),\n              text: cacheDir,\n            },\n          ]);\n        } else {\n          appFileContent = applyChangesToString(appFileContent, [\n            {\n              type: ChangeType.Insert,\n              index: foundDefineConfig[0].getStart() + 14,\n              text: cacheDir,\n            },\n          ]);\n        }\n      }\n    } else {\n      // cacheDir option does not exist and defineConfig is not used\n      // could also potentially be invalid syntax, so try-catch\n      try {\n        const defaultExport = tsquery.query(file, 'ExportAssignment');\n        const found = tsquery?.query(\n          defaultExport?.[0],\n          'ObjectLiteralExpression'\n        );\n        const startOfObject = found?.[0].getStart();\n        appFileContent = applyChangesToString(appFileContent, [\n          {\n            type: ChangeType.Insert,\n            index: startOfObject + 1,\n            text: cacheDir,\n          },\n        ]);\n      } catch {}\n    }\n  }\n\n  return appFileContent;\n}\n"],"names":["ensureViteConfigIsCorrect","tree","path","buildConfigString","buildConfigObject","dtsPlugin","dtsImportLine","pluginOption","testConfigString","testConfigObject","cacheDir","projectAlreadyHasViteTargets","fileContent","read","updatedContent","undefined","test","length","handleBuildOrTestNode","build","handlePluginNode","handleCacheDirNode","write","updatedFileContent","configContentString","configContentObject","name","tsquery","require","buildNode","query","replace","node","found","getText","JSON","stringify","foundDefineConfig","conditionalConfig","transformConditionalConfig","propertyAssignments","applyChangesToString","type","ChangeType","Insert","index","getStart","text","defaultExport","startOfObject","transformCurrentBuildObject","returnStatements","appFileContent","currentBuildObject","currentBuildObjectStart","currentBuildObjectEnd","getEnd","newReturnObject","_node","newContents","Delete","start","SyntaxKind","functionBlock","ifStatement","binaryExpressions","buildExists","find","binaryExpression","buildExistsExpressionIndex","findIndex","serveExists","elseKeywordExists","findNodes","ElseKeyword","functionBlockStart","file","ast","pluginsNode","writeFile","includes","cacheDirNode"],"mappings":"AAAA;+BAKgBA;;aAAAA;;wBALuC;4BAC7B;AAInB,SAASA,0BACdC,IAAU,EACVC,IAAY,EACZC,iBAAyB,EACzBC,iBAAqB,EACrBC,SAAiB,EACjBC,aAAqB,EACrBC,YAAoB,EACpBC,gBAAwB,EACxBC,gBAAoB,EACpBC,QAAgB,EAChBC,4BAA0C,EACjC;IACT,MAAMC,cAAcX,KAAKY,IAAI,CAACX,MAAM;IAEpC,IAAIY,iBAAiBC;IAErB,IAAI,CAACJ,CAAAA,uCAAAA,KAAAA,IAAAA,6BAA8BK,IAAI,AAAD,KAAKR,CAAAA,2BAAAA,KAAAA,IAAAA,iBAAkBS,MAAM,AAAD,GAAG;QACnEH,iBAAiBI,sBACfN,aACAJ,kBACAC,kBACA;IAEJ,CAAC;IAED,IAAI,CAACE,CAAAA,uCAAAA,KAAAA,IAAAA,6BAA8BQ,KAAK,AAAD,KAAKhB,CAAAA,4BAAAA,KAAAA,IAAAA,kBAAmBc,MAAM,AAAD,GAAG;QACrEH,iBAAiBM,iBACfN,yBAAAA,iBAAkBF,WAAW,EAC7BP,WACAC,eACAC;QAGFO,iBAAiBI,sBACfJ,yBAAAA,iBAAkBF,WAAW,EAC7BT,mBACAC,mBACA;IAEJ,CAAC;IAED,IAAIM,mBAAAA,KAAAA,IAAAA,SAAUO,MAAM,EAAE;QACpBH,iBAAiBO,mBACfP,yBAAAA,iBAAkBF,WAAW,EAC7BF;IAEJ,CAAC;IACD,IAAII,gBAAgB;QAClBb,KAAKqB,KAAK,CAACpB,MAAMY;QACjB,OAAO,IAAI;IACb,OAAO;QACL,OAAO,KAAK;IACd,CAAC;AACH;AAEA,SAASI,sBACPK,kBAA0B,EAC1BC,mBAA2B,EAC3BC,mBAAuB,EACvBC,IAAsB,EACF;IACpB,MAAM,EAAEC,QAAO,EAAE,GAAGC,QAAQ;IAC5B,MAAMC,YAAYF,QAAQG,KAAK,CAC7BP,oBACA,CAAC,wCAAwC,EAAEG,KAAK,GAAG,CAAC;IAGtD,IAAIG,UAAUZ,MAAM,EAAE;QACpB,OAAOU,QAAQI,OAAO,CACpBR,oBACA,CAAC,wCAAwC,EAAEG,KAAK,GAAG,CAAC,EACpD,CAACM,OAAe;YACd,MAAMC,QAAQN,QAAQG,KAAK,CAACE,MAAM;YAClC,OAAO,CAAC,EAAEN,KAAK;qBACF,EAAEO,gBAAAA,KAAAA,IAAAA,KAAO,CAAC,EAAE,CAACC,OAAO,EAAE,CAAC;qBACvB,EAAEC,KAAKC,SAAS,CAACX,qBAAqB;gBAC3C,CAAC;QACX;IAEJ,OAAO;QACL,MAAMY,oBAAoBV,QAAQG,KAAK,CACrCP,oBACA;QAGF,IAAIc,kBAAkBpB,MAAM,EAAE;YAC5B,MAAMqB,oBAAoBX,QAAQG,KAAK,CACrCO,iBAAiB,CAAC,EAAE,EACpB;YAGF,IAAIC,kBAAkBrB,MAAM,EAAE;gBAC5B,IAAIS,SAAS,SAAS;oBACpB,OAAOa,2BACLD,mBACAf,oBACAC;gBAEJ,OAAO;oBACL,uCAAuC;oBACvC,OAAOD;gBACT,CAAC;YACH,OAAO;gBACL,MAAMiB,sBAAsBb,QAAQG,KAAK,CACvCO,iBAAiB,CAAC,EAAE,EACpB;gBAGF,IAAIG,oBAAoBvB,MAAM,EAAE;oBAC9B,OAAOwB,IAAAA,4BAAoB,EAAClB,oBAAoB;wBAC9C;4BACEmB,MAAMC,kBAAU,CAACC,MAAM;4BACvBC,OAAOL,mBAAmB,CAAC,EAAE,CAACM,QAAQ;4BACtCC,MAAMvB;wBACR;qBACD;gBACH,OAAO;oBACL,OAAOiB,IAAAA,4BAAoB,EAAClB,oBAAoB;wBAC9C;4BACEmB,MAAMC,kBAAU,CAACC,MAAM;4BACvBC,OAAOR,iBAAiB,CAAC,EAAE,CAACS,QAAQ,KAAK;4BACzCC,MAAMvB;wBACR;qBACD;gBACH,CAAC;YACH,CAAC;QACH,OAAO;YACL,2DAA2D;YAC3D,yDAAyD;YACzD,IAAI;gBACF,MAAMwB,gBAAgBrB,QAAQG,KAAK,CACjCP,oBACA;gBAEF,MAAMU,QAAQN,QAAQG,KAAK,CACzBkB,wBAAAA,KAAAA,IAAAA,aAAe,CAAC,EAAE,EAClB;gBAEF,MAAMC,gBAAgBhB,gBAAAA,KAAAA,IAAAA,KAAO,CAAC,EAAE,CAACa,QAAQ,EAAE;gBAC3C,OAAOL,IAAAA,4BAAoB,EAAClB,oBAAoB;oBAC9C;wBACEmB,MAAMC,kBAAU,CAACC,MAAM;wBACvBC,OAAOI,gBAAgB;wBACvBF,MAAMvB;oBACR;iBACD;YACH,EAAE,UAAM;gBACN,OAAOD;YACT;QACF,CAAC;IACH,CAAC;AACH;AAEA,SAAS2B,4BACPL,KAAa,EACbM,gBAAmC,EACnCC,cAAsB,EACtBhD,iBAAqB,EACD;QAKOuB;IAJ3B,IAAI,CAACwB,CAAAA,2BAAAA,KAAAA,IAAAA,gBAAkB,CAACN,MAAM,AAAD,GAAG;QAC9B,OAAO9B;IACT,CAAC;IACD,MAAM,EAAEY,QAAO,EAAE,GAAGC,QAAQ;IAC5B,MAAMyB,qBAAqB1B,CAAAA,MAAAA,QACxBG,KAAK,CAACqB,gBAAgB,CAACN,MAAM,EAAE,sCADPlB,KAAAA,IAAAA,GACmC,CAAC,EAAE,CAC9DO,OAAO,EAAE;IAEZ,MAAMoB,0BAA0BH,gBAAgB,CAACN,MAAM,CAACC,QAAQ;IAChE,MAAMS,wBAAwBJ,gBAAgB,CAACN,MAAM,CAACW,MAAM;IAE5D,MAAMC,kBAAkB9B,QAAQI,OAAO,CACrCoB,gBAAgB,CAACN,MAAM,CAACX,OAAO,IAC/B,2BACA,CAACwB,QAAgB;QACf,OAAO,CAAC;WACH,EAAEL,mBAAmB;WACrB,EAAElB,KAAKC,SAAS,CAAChC,mBAAmB;MACzC,CAAC;IACH;IAGF,MAAMuD,cAAclB,IAAAA,4BAAoB,EAACW,gBAAgB;QACvD;YACEV,MAAMC,kBAAU,CAACiB,MAAM;YACvBC,OAAOP;YACPrC,QAAQsC,wBAAwBD;QAClC;QACA;YACEZ,MAAMC,kBAAU,CAACC,MAAM;YACvBC,OAAOS;YACPP,MAAMU;QACR;KACD;IAED,OAAOE;AACT;AAEA,SAASpB,2BACPD,iBAAyB,EACzBc,cAAsB,EACtBhD,iBAAqB,EACD;IACpB,MAAM,EAAEuB,QAAO,EAAE,GAAGC,QAAQ;IAC5B,MAAM,EAAEkC,WAAU,EAAE,GAAGlC,QAAQ;IAC/B,MAAMmC,gBAAgBpC,QAAQG,KAAK,CAACQ,iBAAiB,CAAC,EAAE,EAAE;IAE1D,MAAM0B,cAAcrC,QAAQG,KAAK,CAACiC,wBAAAA,KAAAA,IAAAA,aAAe,CAAC,EAAE,EAAE;IAEtD,MAAME,oBAAoBtC,QAAQG,KAAK,CAACkC,sBAAAA,KAAAA,IAAAA,WAAa,CAAC,EAAE,EAAE;IAE1D,MAAME,cAAcD,4BAAAA,KAAAA,IAAAA,kBAAmBE,IAAI,CACzC,CAACC,mBAAqBA,iBAAiBlC,OAAO,OAAO,CAAC,mBAAmB,CAAC;IAG5E,MAAMmC,6BAA6BJ,4BAAAA,KAAAA,IAAAA,kBAAmBK,SAAS,CAC7D,CAACF,mBAAqBA,iBAAiBlC,OAAO,OAAO,CAAC,mBAAmB,CAAC;IAG5E,MAAMqC,cAAcN,4BAAAA,KAAAA,IAAAA,kBAAmBE,IAAI,CACzC,CAACC,mBAAqBA,iBAAiBlC,OAAO,OAAO,CAAC,mBAAmB,CAAC;IAG5E,MAAMsC,oBAAoBC,IAAAA,qBAAS,EAACT,sBAAAA,KAAAA,IAAAA,WAAa,CAAC,EAAE,EAAEF,WAAWY,WAAW;IAC5E,MAAMvB,mBAAsCxB,QAAQG,KAAK,CACvDkC,WAAW,CAAC,EAAE,EACd;IAGF,IAAI,CAACE,aAAa;QAChB,IAAIK,eAAeC,mBAAmB;gBAIlCtB;YAHF,2CAA2C;YAE3C,OACEA,CAAAA,MAAAA,4BACEC,CAAAA,2BAAAA,KAAAA,IAAAA,iBAAkBlC,MAAM,AAAD,IAAI,GAC3BkC,kBACAC,gBACAhD,8BAJF8C,MAKKE,cAAc;QAEvB,OAAO;YACL,6BAA6B;YAC7B,MAAMuB,qBAAqBZ,wBAAAA,KAAAA,IAAAA,aAAe,CAAC,EAAE,CAACjB,QAAQ,EAAE;YACxD,MAAMa,cAAclB,IAAAA,4BAAoB,EAACW,gBAAgB;gBACvD;oBACEV,MAAMC,kBAAU,CAACC,MAAM;oBACvBC,OAAO8B,qBAAqB;oBAC5B5B,MAAM,CAAC;;qBAEI,EAAEZ,KAAKC,SAAS,CAAChC,mBAAmB;;YAE7C,CAAC;gBACL;aACD;YACD,OAAOuD;QACT,CAAC;IACH,OAAO;YAMHT;QALF,uBAAuB;QACvB,8CAA8C;QAC9C,oCAAoC;QAEpC,OACEA,CAAAA,OAAAA,4BACEmB,4BACAlB,kBACAC,gBACAhD,8BAJF8C,OAKKE,cAAc;IAEvB,CAAC;AACH;AAEA,SAAShC,iBACPgC,cAAsB,EACtB/C,SAAiB,EACjBC,aAAqB,EACrBC,YAAoB,EACA;IACpB,MAAM,EAAEoB,QAAO,EAAE,GAAGC,QAAQ;IAE5B,MAAMgD,OAAOjD,QAAQkD,GAAG,CAACzB;IACzB,MAAM0B,cAAcnD,QAAQG,KAAK,CAC/B8C,MACA;IAGF,IAAIG,YAAY,KAAK;IAErB,IAAID,YAAY7D,MAAM,EAAE;QACtBmC,iBAAiBzB,QAAQI,OAAO,CAC9B6C,KAAK1C,OAAO,IACZ,sDACA,CAACF,OAAe;YACd,MAAMC,QAAQN,QAAQG,KAAK,CAACE,MAAM;YAClC,OAAO,CAAC;uBACO,EAAEC,gBAAAA,KAAAA,IAAAA,KAAO,CAAC,EAAE,CAACC,OAAO,EAAE,CAAC;oBAC1B,EAAE7B,UAAU;iBACf,CAAC;QACZ;QAEF0E,YAAY,IAAI;IAClB,OAAO;QACL,kCAAkC;QAClC,2BAA2B;QAE3B,MAAM1C,oBAAoBV,QAAQG,KAAK,CACrC8C,MACA;QAGF,IAAIvC,kBAAkBpB,MAAM,EAAE;YAC5B,MAAMqB,oBAAoBX,QAAQG,KAAK,CACrCO,iBAAiB,CAAC,EAAE,EACpB;YAGF,IAAIC,kBAAkBrB,MAAM,EAAE;gBAC5B,iDAAiD;gBACjD,eAAe;gBACf8D,YAAY,KAAK;YACnB,OAAO;gBACL,MAAMvC,sBAAsBb,QAAQG,KAAK,CACvCO,iBAAiB,CAAC,EAAE,EACpB;gBAGF,IAAIG,oBAAoBvB,MAAM,EAAE;oBAC9BmC,iBAAiBX,IAAAA,4BAAoB,EAACW,gBAAgB;wBACpD;4BACEV,MAAMC,kBAAU,CAACC,MAAM;4BACvBC,OAAOL,mBAAmB,CAAC,EAAE,CAACM,QAAQ;4BACtCC,MAAMxC;wBACR;qBACD;oBACDwE,YAAY,IAAI;gBAClB,OAAO;oBACL3B,iBAAiBX,IAAAA,4BAAoB,EAACW,gBAAgB;wBACpD;4BACEV,MAAMC,kBAAU,CAACC,MAAM;4BACvBC,OAAOR,iBAAiB,CAAC,EAAE,CAACS,QAAQ,KAAK;4BACzCC,MAAMxC;wBACR;qBACD;oBACDwE,YAAY,IAAI;gBAClB,CAAC;YACH,CAAC;QACH,OAAO;YACL,6DAA6D;YAC7D,yDAAyD;YACzD,IAAI;gBACF,MAAM/B,gBAAgBrB,QAAQG,KAAK,CAAC8C,MAAM;gBAC1C,MAAM3C,QAAQN,kBAAAA,KAAAA,IAAAA,QAASG,KAAK,CAC1BkB,wBAAAA,KAAAA,IAAAA,aAAe,CAAC,EAAE,EAClB;gBAEF,MAAMC,gBAAgBhB,gBAAAA,KAAAA,IAAAA,KAAO,CAAC,EAAE,CAACa,QAAQ,EAAE;gBAC3CM,iBAAiBX,IAAAA,4BAAoB,EAACW,gBAAgB;oBACpD;wBACEV,MAAMC,kBAAU,CAACC,MAAM;wBACvBC,OAAOI,gBAAgB;wBACvBF,MAAMxC;oBACR;iBACD;gBACDwE,YAAY,IAAI;YAClB,EAAE,UAAM;gBACNA,YAAY,KAAK;YACnB;QACF,CAAC;IACH,CAAC;IAED,IAAIA,WAAW;QACb,IAAI,CAAC3B,eAAe4B,QAAQ,CAAC,CAAC,iCAAiC,CAAC,GAAG;YACjE,OAAO1E,gBAAgB,OAAO8C;QAChC,CAAC;QACD,OAAOA;IACT,CAAC;IACD,OAAOA;AACT;AAEA,SAAS/B,mBAAmB+B,cAAsB,EAAE1C,QAAgB,EAAU;IAC5E,MAAM,EAAEiB,QAAO,EAAE,GAAGC,QAAQ;IAE5B,MAAMgD,OAAOjD,QAAQkD,GAAG,CAACzB;IACzB,MAAM6B,eAAetD,QAAQG,KAAK,CAChC8C,MACA;IAGF,IAAI,CAACK,CAAAA,uBAAAA,KAAAA,IAAAA,aAAchE,MAAM,AAAD,KAAKgE,CAAAA,uBAAAA,KAAAA,IAAAA,aAAchE,MAAM,AAAD,MAAM,GAAG;QACvD,mCAAmC;QACnC,2BAA2B;QAE3B,MAAMoB,oBAAoBV,QAAQG,KAAK,CACrC8C,MACA;QAGF,IAAIvC,kBAAkBpB,MAAM,EAAE;YAC5B,MAAMqB,oBAAoBX,QAAQG,KAAK,CACrCO,iBAAiB,CAAC,EAAE,EACpB;YAGF,IAAIC,kBAAkBrB,MAAM,EAAE;YAC5B,iDAAiD;YACjD,gBAAgB;YAClB,OAAO;gBACL,MAAMuB,sBAAsBb,QAAQG,KAAK,CACvCO,iBAAiB,CAAC,EAAE,EACpB;gBAGF,IAAIG,oBAAoBvB,MAAM,EAAE;oBAC9BmC,iBAAiBX,IAAAA,4BAAoB,EAACW,gBAAgB;wBACpD;4BACEV,MAAMC,kBAAU,CAACC,MAAM;4BACvBC,OAAOL,mBAAmB,CAAC,EAAE,CAACM,QAAQ;4BACtCC,MAAMrC;wBACR;qBACD;gBACH,OAAO;oBACL0C,iBAAiBX,IAAAA,4BAAoB,EAACW,gBAAgB;wBACpD;4BACEV,MAAMC,kBAAU,CAACC,MAAM;4BACvBC,OAAOR,iBAAiB,CAAC,EAAE,CAACS,QAAQ,KAAK;4BACzCC,MAAMrC;wBACR;qBACD;gBACH,CAAC;YACH,CAAC;QACH,OAAO;YACL,8DAA8D;YAC9D,yDAAyD;YACzD,IAAI;gBACF,MAAMsC,gBAAgBrB,QAAQG,KAAK,CAAC8C,MAAM;gBAC1C,MAAM3C,QAAQN,kBAAAA,KAAAA,IAAAA,QAASG,KAAK,CAC1BkB,wBAAAA,KAAAA,IAAAA,aAAe,CAAC,EAAE,EAClB;gBAEF,MAAMC,gBAAgBhB,gBAAAA,KAAAA,IAAAA,KAAO,CAAC,EAAE,CAACa,QAAQ,EAAE;gBAC3CM,iBAAiBX,IAAAA,4BAAoB,EAACW,gBAAgB;oBACpD;wBACEV,MAAMC,kBAAU,CAACC,MAAM;wBACvBC,OAAOI,gBAAgB;wBACvBF,MAAMrC;oBACR;iBACD;YACH,EAAE,UAAM,CAAC;QACX,CAAC;IACH,CAAC;IAED,OAAO0C;AACT"}