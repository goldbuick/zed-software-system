"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    mockViteReactAppGenerator: ()=>mockViteReactAppGenerator,
    mockReactAppGenerator: ()=>mockReactAppGenerator,
    mockReactMixedAppGenerator: ()=>mockReactMixedAppGenerator,
    mockWebAppGenerator: ()=>mockWebAppGenerator,
    mockAngularAppGenerator: ()=>mockAngularAppGenerator,
    mockUnknownAppGenerator: ()=>mockUnknownAppGenerator,
    mockReactLibNonBuildableJestTestRunnerGenerator: ()=>mockReactLibNonBuildableJestTestRunnerGenerator,
    mockReactLibNonBuildableVitestRunnerGenerator: ()=>mockReactLibNonBuildableVitestRunnerGenerator
});
const _extends = require("@swc/helpers/lib/_extends.js").default;
const _devkit = require("@nrwl/devkit");
const _reactProjectConfigJson = require("./test-files/react-project.config.json");
const _reactViteProjectConfigJson = require("./test-files/react-vite-project.config.json");
const _webProjectConfigJson = require("./test-files/web-project.config.json");
const _angularProjectConfigJson = require("./test-files/angular-project.config.json");
const _unknownProjectConfigJson = require("./test-files/unknown-project.config.json");
const _reactMixedProjectConfigJson = require("./test-files/react-mixed-project.config.json");
const _reactLibNonBuildableJestJson = require("./test-files/react-lib-non-buildable-jest.json");
const _reactLibNonBuildableVitestJson = require("./test-files/react-lib-non-buildable-vitest.json");
function mockViteReactAppGenerator(tree) {
    const appName = 'my-test-react-vite-app';
    tree.write(`apps/${appName}/src/main.tsx`, `import ReactDOM from 'react-dom';\n`);
    tree.write(`apps/${appName}/tsconfig.json`, `{
      "compilerOptions": {
        "jsx": "react-jsx",
        "allowJs": false,
        "esModuleInterop": false,
        "allowSyntheticDefaultImports": true,
        "strict": true,
        "types": ["vite/client"]
      },
      "files": [],
      "include": [],
      "references": [
        {
          "path": "./tsconfig.app.json"
        },
        {
          "path": "./tsconfig.spec.json"
        }
      ],
      "extends": "../../tsconfig.base.json"
      }
      `);
    tree.write(`apps/${appName}/tsconfig.app.json`, `{
      "extends": "./tsconfig.json",
      "compilerOptions": {
        "outDir": "../../dist/out-tsc",
        "types": ["node"]
      },
      "files": [
        "../../node_modules/@nrwl/react/typings/cssmodule.d.ts",
        "../../node_modules/@nrwl/react/typings/image.d.ts"
      ],
      "exclude": [
        "src/**/*.spec.ts",
        "src/**/*.test.ts",
        "src/**/*.spec.tsx",
        "src/**/*.test.tsx",
        "src/**/*.spec.js",
        "src/**/*.test.js",
        "src/**/*.spec.jsx",
        "src/**/*.test.jsx"
      ],
      "include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]
    }   
      `);
    tree.write(`apps/${appName}/index.html`, `<!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="utf-8" />
        <title>Rv1</title>
        <base href="/" />
    
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" type="image/x-icon" href="/favicon.ico" />
        <link rel="stylesheet" href="/src/styles.css" />
      </head>
      <body>
        <div id="root"></div>
        <script type="module" src="/src/main.tsx"></script>
      </body>
    </html>`);
    tree.write(`apps/${appName}/vite.config.ts`, `    /// <reference types="vitest" />
    import { defineConfig } from 'vite';
    import react from '@vitejs/plugin-react';
    import tsconfigPaths from 'vite-tsconfig-paths';
    
    export default defineConfig({
      server: {
        port: 4200,
        host: 'localhost',
      },
      plugins: [
        react(),
        tsconfigPaths({
          root: '../../',
          projects: ['tsconfig.base.json'],
        }),
      ],
    
      test: {
        globals: true,
        cache: {
          dir: '../../node_modules/.vitest',
        },
        environment: 'jsdom',
        include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
      },
    });
    `);
    (0, _devkit.writeJson)(tree, 'workspace.json', {
        projects: {
            'my-test-react-vite-app': _extends({}, _reactViteProjectConfigJson, {
                root: `apps/${appName}`,
                projectType: 'application'
            })
        }
    });
    (0, _devkit.writeJson)(tree, `apps/${appName}/project.json`, _extends({}, _reactViteProjectConfigJson, {
        root: `apps/${appName}`,
        projectType: 'application'
    }));
    return tree;
}
function mockReactAppGenerator(tree) {
    const appName = 'my-test-react-app';
    tree.write(`apps/${appName}/src/main.tsx`, `import ReactDOM from 'react-dom';\n`);
    tree.write(`apps/${appName}/tsconfig.json`, `{
        "extends": "../../tsconfig.base.json",
        "compilerOptions": {
          "jsx": "react-jsx",
          "allowJs": true,
          "esModuleInterop": true,
          "allowSyntheticDefaultImports": true,
          "forceConsistentCasingInFileNames": true,
          "strict": true,
          "noImplicitOverride": true,
          "noPropertyAccessFromIndexSignature": true,
          "noImplicitReturns": true,
          "noFallthroughCasesInSwitch": true
        },
        "files": [],
        "include": [],
        "references": [
          {
            "path": "./tsconfig.app.json"
          },
          {
            "path": "./tsconfig.spec.json"
          }
        ]
      }
      `);
    tree.write(`apps/${appName}/tsconfig.app.json`, `{
      "extends": "./tsconfig.json",
      "compilerOptions": {
        "outDir": "../../dist/out-tsc"
      },
      "files": [
        "../../node_modules/@nrwl/react/typings/cssmodule.d.ts",
        "../../node_modules/@nrwl/react/typings/image.d.ts"
      ],
      "exclude": [
        "jest.config.ts",
        "**/*.spec.ts",
        "**/*.test.ts",
        "**/*.spec.tsx",
        "**/*.test.tsx",
        "**/*.spec.js",
        "**/*.test.js",
        "**/*.spec.jsx",
        "**/*.test.jsx"
      ],
      "include": ["**/*.js", "**/*.jsx", "**/*.ts", "**/*.tsx"]
    }   
      `);
    tree.write(`apps/${appName}/src/index.html`, `<!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="utf-8" />
        <title>My Test React App</title>
        <base href="/" />
    
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" type="image/x-icon" href="favicon.ico" />
      </head>
      <body>
        <div id="root"></div>
      </body>
    </html>`);
    (0, _devkit.writeJson)(tree, 'workspace.json', {
        projects: {
            'my-test-react-app': _extends({}, _reactProjectConfigJson, {
                root: `apps/${appName}`,
                projectType: 'application'
            })
        }
    });
    (0, _devkit.writeJson)(tree, `apps/${appName}/project.json`, _extends({}, _reactProjectConfigJson, {
        root: `apps/${appName}`,
        projectType: 'application'
    }));
    return tree;
}
function mockReactMixedAppGenerator(tree) {
    const appName = 'my-test-mixed-react-app';
    tree.write(`apps/${appName}/src/main.tsx`, `import ReactDOM from 'react-dom';\n`);
    tree.write(`apps/${appName}/tsconfig.json`, `{
        "extends": "../../tsconfig.base.json",
        "compilerOptions": {
          "jsx": "react-jsx",
          "allowJs": true,
          "esModuleInterop": true,
          "allowSyntheticDefaultImports": true,
          "forceConsistentCasingInFileNames": true,
          "strict": true,
          "noImplicitOverride": true,
          "noPropertyAccessFromIndexSignature": true,
          "noImplicitReturns": true,
          "noFallthroughCasesInSwitch": true
        },
        "files": [],
        "include": [],
        "references": [
          {
            "path": "./tsconfig.app.json"
          },
          {
            "path": "./tsconfig.spec.json"
          }
        ]
      }
      `);
    tree.write(`apps/${appName}/tsconfig.app.json`, `{
      "extends": "./tsconfig.json",
      "compilerOptions": {
        "outDir": "../../dist/out-tsc"
      },
      "files": [
        "../../node_modules/@nrwl/react/typings/cssmodule.d.ts",
        "../../node_modules/@nrwl/react/typings/image.d.ts"
      ],
      "exclude": [
        "jest.config.ts",
        "**/*.spec.ts",
        "**/*.test.ts",
        "**/*.spec.tsx",
        "**/*.test.tsx",
        "**/*.spec.js",
        "**/*.test.js",
        "**/*.spec.jsx",
        "**/*.test.jsx"
      ],
      "include": ["**/*.js", "**/*.jsx", "**/*.ts", "**/*.tsx"]
    }   
      `);
    tree.write(`apps/${appName}/src/index.html`, `<!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="utf-8" />
        <title>My Test React App</title>
        <base href="/" />
    
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" type="image/x-icon" href="favicon.ico" />
      </head>
      <body>
        <div id="root"></div>
      </body>
    </html>`);
    (0, _devkit.writeJson)(tree, 'workspace.json', {
        projects: {
            'my-test-mixed-react-app': _extends({}, _reactMixedProjectConfigJson, {
                root: `apps/${appName}`,
                projectType: 'application'
            })
        }
    });
    (0, _devkit.writeJson)(tree, `apps/${appName}/project.json`, _extends({}, _reactMixedProjectConfigJson, {
        root: `apps/${appName}`,
        projectType: 'application'
    }));
    return tree;
}
function mockWebAppGenerator(tree) {
    const appName = 'my-test-web-app';
    tree.write(`apps/${appName}/src/main.ts`, `import './app/app.element.ts';`);
    tree.write(`apps/${appName}/tsconfig.json`, `{
        "extends": "../../tsconfig.base.json",
        "files": [],
        "include": [],
        "references": [
          {
            "path": "./tsconfig.app.json"
          },
          {
            "path": "./tsconfig.spec.json"
          }
        ]
      }      
        `);
    tree.write(`apps/${appName}/src/index.html`, `<!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="utf-8" />
        <title>WebappPure</title>
        <base href="/" />
    
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" type="image/x-icon" href="favicon.ico" />
      </head>
      <body>
        <workspace-root></workspace-root>
      </body>
    </html>
    `);
    (0, _devkit.writeJson)(tree, 'workspace.json', {
        projects: {
            'my-test-web-app': _extends({}, _webProjectConfigJson, {
                root: `apps/${appName}`,
                projectType: 'application'
            })
        }
    });
    (0, _devkit.writeJson)(tree, `apps/${appName}/project.json`, _extends({}, _webProjectConfigJson, {
        root: `apps/${appName}`,
        projectType: 'application'
    }));
    return tree;
}
function mockAngularAppGenerator(tree) {
    const appName = 'my-test-angular-app';
    (0, _devkit.writeJson)(tree, 'workspace.json', {
        projects: {
            'my-test-angular-app': _extends({}, _angularProjectConfigJson, {
                root: `apps/${appName}`,
                projectType: 'application'
            })
        }
    });
    (0, _devkit.writeJson)(tree, `apps/${appName}/project.json`, _extends({}, _angularProjectConfigJson, {
        root: `apps/${appName}`,
        projectType: 'application'
    }));
    return tree;
}
function mockUnknownAppGenerator(tree) {
    const appName = 'my-test-random-app';
    (0, _devkit.writeJson)(tree, 'workspace.json', {
        projects: {
            'my-test-random-app': _extends({}, _unknownProjectConfigJson, {
                root: `apps/${appName}`,
                projectType: 'application'
            })
        }
    });
    (0, _devkit.writeJson)(tree, `apps/${appName}/project.json`, _extends({}, _unknownProjectConfigJson, {
        root: `apps/${appName}`,
        projectType: 'application'
    }));
    return tree;
}
function mockReactLibNonBuildableJestTestRunnerGenerator(tree) {
    const libName = 'react-lib-nonb-jest';
    tree.write(`libs/${libName}/src/index.ts`, ``);
    tree.write(`libs/${libName}/tsconfig.json`, `{
      "compilerOptions": {
        "jsx": "react-jsx",
        "allowJs": false,
        "esModuleInterop": false,
        "allowSyntheticDefaultImports": true,
        "strict": true
      },
      "files": [],
      "include": [],
      "references": [
        {
          "path": "./tsconfig.lib.json"
        },
        {
          "path": "./tsconfig.spec.json"
        }
      ],
      "extends": "../../tsconfig.base.json"
    }`);
    tree.write(`libs/${libName}/tsconfig.lib.json`, `{
      "extends": "./tsconfig.json",
      "compilerOptions": {
        "outDir": "../../dist/out-tsc",
        "types": ["node"]
      },
      "files": [
        "../../node_modules/@nrwl/react/typings/cssmodule.d.ts",
        "../../node_modules/@nrwl/react/typings/image.d.ts"
      ],
      "exclude": [
        "jest.config.ts",
        "src/**/*.spec.ts",
        "src/**/*.test.ts",
        "src/**/*.spec.tsx",
        "src/**/*.test.tsx",
        "src/**/*.spec.js",
        "src/**/*.test.js",
        "src/**/*.spec.jsx",
        "src/**/*.test.jsx"
      ],
      "include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]
    }`);
    (0, _devkit.writeJson)(tree, 'workspace.json', {
        projects: {
            [`${libName}`]: _extends({}, _reactLibNonBuildableJestJson, {
                root: `libs/${libName}`,
                projectType: 'library'
            })
        }
    });
    (0, _devkit.writeJson)(tree, `libs/${libName}/project.json`, _extends({}, _reactLibNonBuildableJestJson, {
        root: `libs/${libName}`,
        projectType: 'library'
    }));
    return tree;
}
function mockReactLibNonBuildableVitestRunnerGenerator(tree) {
    const libName = 'react-lib-nonb-vitest';
    tree.write(`libs/${libName}/src/index.ts`, ``);
    tree.write(`libs/${libName}/vite.config.ts`, `/// <reference types="vitest" />
    import { defineConfig } from 'vite';
    import react from '@vitejs/plugin-react';
    import viteTsConfigPaths from 'vite-tsconfig-paths';

    export default defineConfig({

      plugins: [
        react(),
        viteTsConfigPaths({
          root: '../../',
        }),
      ],

      test: {
        globals: true,
        cache: {
          dir: '../../node_modules/.vitest',
        },
        environment: 'jsdom',
        include: ['src/**/*.{test,spec}.{js,mjs,cjs,ts,mts,cts,jsx,tsx}'],
      },
    });
  `);
    tree.write(`libs/${libName}/tsconfig.json`, `{
      "compilerOptions": {
        "jsx": "react-jsx",
        "allowJs": false,
        "esModuleInterop": false,
        "allowSyntheticDefaultImports": true,
        "strict": true
      },
      "files": [],
      "include": [],
      "references": [
        {
          "path": "./tsconfig.lib.json"
        },
        {
          "path": "./tsconfig.spec.json"
        }
      ],
      "extends": "../../tsconfig.base.json"
    }`);
    tree.write(`libs/${libName}/tsconfig.lib.json`, `{
      "extends": "./tsconfig.json",
      "compilerOptions": {
        "outDir": "../../dist/out-tsc",
        "types": ["node"]
      },
      "files": [
        "../../node_modules/@nrwl/react/typings/cssmodule.d.ts",
        "../../node_modules/@nrwl/react/typings/image.d.ts"
      ],
      "exclude": [
        "**/*.spec.ts",
        "**/*.test.ts",
        "**/*.spec.tsx",
        "**/*.test.tsx",
        "**/*.spec.js",
        "**/*.test.js",
        "**/*.spec.jsx",
        "**/*.test.jsx"
      ],
      "include": ["**/*.js", "**/*.jsx", "**/*.ts", "**/*.tsx"]
    }`);
    (0, _devkit.writeJson)(tree, 'workspace.json', {
        projects: {
            [`${libName}`]: _extends({}, _reactLibNonBuildableVitestJson, {
                root: `libs/${libName}`,
                projectType: 'library'
            })
        }
    });
    (0, _devkit.writeJson)(tree, `libs/${libName}/project.json`, _extends({}, _reactLibNonBuildableVitestJson, {
        root: `libs/${libName}`,
        projectType: 'library'
    }));
    return tree;
}

//# sourceMappingURL=test-utils.js.map