"use strict";
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    normalizeViteConfigFilePath: ()=>normalizeViteConfigFilePath,
    getViteServerProxyConfigPath: ()=>getViteServerProxyConfigPath,
    getViteSharedConfig: ()=>getViteSharedConfig,
    getViteServerOptions: ()=>getViteServerOptions,
    getViteBuildOptions: ()=>getViteBuildOptions,
    getVitePreviewOptions: ()=>getVitePreviewOptions,
    getNxTargetOptions: ()=>getNxTargetOptions
});
const _devkit = require("@nrwl/devkit");
const _fs = require("fs");
const _path = require("path");
const _vite = require("vite");
const _rollupReplaceFilesPlugin = require("../../plugins/rollup-replace-files.plugin");
function normalizeViteConfigFilePath(projectRoot, configFile) {
    return configFile && (0, _fs.existsSync)((0, _devkit.joinPathFragments)(configFile)) ? configFile : (0, _fs.existsSync)((0, _devkit.joinPathFragments)(`${projectRoot}/vite.config.ts`)) ? (0, _devkit.joinPathFragments)(`${projectRoot}/vite.config.ts`) : (0, _fs.existsSync)((0, _devkit.joinPathFragments)(`${projectRoot}/vite.config.js`)) ? (0, _devkit.joinPathFragments)(`${projectRoot}/vite.config.js`) : undefined;
}
function getViteServerProxyConfigPath(nxProxyConfig, context) {
    if (nxProxyConfig) {
        const projectRoot = context.projectsConfigurations.projects[context.projectName].root;
        const proxyConfigPath = nxProxyConfig ? (0, _path.join)(context.root, nxProxyConfig) : (0, _path.join)(projectRoot, 'proxy.conf.json');
        if ((0, _fs.existsSync)(proxyConfigPath)) {
            return proxyConfigPath;
        }
    }
}
function getViteSharedConfig(options, clearScreen, context) {
    const projectRoot = context.projectsConfigurations.projects[context.projectName].root;
    const root = _path.relative(context.cwd, (0, _devkit.joinPathFragments)(context.root, projectRoot));
    return {
        mode: options.mode,
        root,
        base: options.base,
        configFile: normalizeViteConfigFilePath(projectRoot, options.configFile),
        plugins: [
            (0, _rollupReplaceFilesPlugin.default)(options.fileReplacements)
        ],
        optimizeDeps: {
            force: options.force
        },
        clearScreen: clearScreen,
        logLevel: options.logLevel
    };
}
function getViteServerOptions(options, context) {
    const projectRoot = context.projectsConfigurations.projects[context.projectName].root;
    const serverOptions = {
        host: options.host,
        port: options.port,
        https: options.https,
        hmr: options.hmr,
        open: options.open,
        cors: options.cors,
        fs: {
            allow: [
                (0, _vite.searchForWorkspaceRoot)((0, _devkit.joinPathFragments)(projectRoot)),
                (0, _devkit.joinPathFragments)(context.root, 'node_modules/vite')
            ]
        }
    };
    const proxyConfigPath = getViteServerProxyConfigPath(options.proxyConfig, context);
    if (proxyConfigPath) {
        _devkit.logger.info(`Loading proxy configuration from: ${proxyConfigPath}`);
        serverOptions.proxy = require(proxyConfigPath);
    }
    return serverOptions;
}
function getViteBuildOptions(options, context) {
    const projectRoot = context.projectsConfigurations.projects[context.projectName].root;
    return {
        outDir: (0, _path.relative)(projectRoot, options.outputPath),
        emptyOutDir: true,
        reportCompressedSize: true,
        cssCodeSplit: true,
        target: 'esnext',
        commonjsOptions: {
            transformMixedEsModules: true
        },
        sourcemap: options.sourcemap,
        minify: options.minify,
        manifest: options.manifest,
        ssrManifest: options.ssrManifest,
        ssr: options.ssr,
        watch: options.watch
    };
}
function getVitePreviewOptions(options, context) {
    const serverOptions = {
        host: options.host,
        port: options.port,
        https: options.https,
        open: options.open
    };
    const proxyConfigPath = getViteServerProxyConfigPath(options.proxyConfig, context);
    if (proxyConfigPath) {
        _devkit.logger.info(`Loading proxy configuration from: ${proxyConfigPath}`);
        serverOptions.proxy = require(proxyConfigPath);
    }
    return serverOptions;
}
function getNxTargetOptions(target, context) {
    const targetObj = (0, _devkit.parseTargetString)(target, context.projectGraph);
    return (0, _devkit.readTargetOptions)(targetObj, context);
}

//# sourceMappingURL=options-utils.js.map