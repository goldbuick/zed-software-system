"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withModuleFederationForSSR = void 0;
const tslib_1 = require("tslib");
const project_graph_1 = require("nx/src/project-graph/project-graph");
const utils_1 = require("./utils");
function determineRemoteUrl(remote) {
    var _a, _b, _c, _d, _e;
    const remoteConfiguration = (0, project_graph_1.readCachedProjectConfiguration)(remote);
    const serveTarget = (_a = remoteConfiguration === null || remoteConfiguration === void 0 ? void 0 : remoteConfiguration.targets) === null || _a === void 0 ? void 0 : _a['serve-server'];
    if (!serveTarget) {
        throw new Error(`Cannot automatically determine URL of remote (${remote}). Looked for property "host" in the project's "serve-server" target.\n
      You can also use the tuple syntax in your webpack config to configure your remotes. e.g. \`remotes: [['remote1', 'http://localhost:4201']]\``);
    }
    const host = (_c = (_b = serveTarget.options) === null || _b === void 0 ? void 0 : _b.host) !== null && _c !== void 0 ? _c : 'http://localhost';
    const port = (_e = (_d = serveTarget.options) === null || _d === void 0 ? void 0 : _d.port) !== null && _e !== void 0 ? _e : 4201;
    return `${host.endsWith('/') ? host.slice(0, -1) : host}:${port}/server/remoteEntry.js`;
}
function withModuleFederationForSSR(options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const reactWebpackConfig = require('../../plugins/webpack');
        const { sharedLibraries, sharedDependencies, mappedRemotes } = yield (0, utils_1.getModuleFederationConfig)(options, determineRemoteUrl, {
            isServer: true,
        });
        return (config) => {
            config = reactWebpackConfig(config);
            config.target = false;
            config.output.uniqueName = options.name;
            config.optimization = {
                runtimeChunk: false,
            };
            config.plugins.push(new (require('@module-federation/node').UniversalFederationPlugin)({
                name: options.name,
                filename: 'remoteEntry.js',
                exposes: options.exposes,
                remotes: mappedRemotes,
                shared: Object.assign({}, sharedDependencies),
                library: {
                    type: 'commonjs-module',
                },
                isServer: true,
            }, {}), sharedLibraries.getReplacementPlugin());
            return config;
        };
    });
}
exports.withModuleFederationForSSR = withModuleFederationForSSR;
//# sourceMappingURL=with-module-federation-ssr.js.map