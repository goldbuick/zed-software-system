"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateProjectConfig = void 0;
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
function updateProjectConfig(tree, options) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const { findBuildConfig } = yield Promise.resolve().then(() => require('@nrwl/cypress/src/utils/find-target-options'));
        const found = yield findBuildConfig(tree, {
            project: options.project,
            buildTarget: options.buildTarget,
            validExecutorNames: new Set([
                '@nrwl/webpack:webpack',
                '@nrwl/vite:build',
            ]),
        });
        assetValidConfig(found === null || found === void 0 ? void 0 : found.config);
        const projectConfig = (0, devkit_1.readProjectConfiguration)(tree, options.project);
        projectConfig.targets['component-test'].options = Object.assign(Object.assign({}, projectConfig.targets['component-test'].options), { devServerTarget: found.target, skipServe: true });
        (0, devkit_1.updateProjectConfiguration)(tree, options.project, projectConfig);
        return found;
    });
}
exports.updateProjectConfig = updateProjectConfig;
function assetValidConfig(config) {
    if (!config) {
        throw new Error('Unable to find a valid build configuration. Try passing in a target for a React app. --build-target=<project>:<target>[:<configuration>]');
    }
}
//# sourceMappingURL=update-configs.js.map